//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_ConfigDataAccess
    {

        private SYS_Config _sys_config;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";
        public static string FIELD_VALUE = "Value";


        #region Private methods

        private static void SetSYS_ConfigInfo(DbDataReader reader, ref SYS_Config sys_config)
        {
            sys_config.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_config.Name = "" + reader[FIELD_NAME];
            sys_config.Value = "" + reader[FIELD_VALUE];
        }

        private static void SetListSYS_ConfigInfo(ref DbDataReader reader, ref List<SYS_Config> sys_configs)
        {
            SYS_Config sys_config = null;
            while (reader.Read())
            {
                sys_config = new SYS_Config();
                SYS_ConfigDataAccess.SetSYS_ConfigInfo(reader, ref sys_config);
                sys_configs.Add(sys_config);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Config(SYS_Config sys_config)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Config_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Config(List<SYS_Config> sys_configs)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Config sys_config in sys_configs)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_config_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Config(SYS_Config sys_config)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Config_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Config(List<SYS_Config> sys_configs)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Config sys_config in sys_configs)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Config_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Config(SYS_Config sys_config)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Config_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }


        }

        public SYS_Config SelectSYS_Config(int ID)
        {

            SYS_Config sys_config = new SYS_Config();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Config_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_ConfigDataAccess.SetSYS_ConfigInfo(reader, ref sys_config);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Open();
            }
            return sys_config;
        }


        public List<SYS_Config> SelectAllSYS_Config()
        {
            List<SYS_Config> sys_config = new List<SYS_Config>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Config_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_ConfigDataAccess.SetListSYS_ConfigInfo(ref reader, ref sys_config);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_ConfigDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_config;
        }

        public int InsertSYS_Config(DbTransaction transaction, SYS_Config sys_config)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Config_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Config(DbTransaction transaction, List<SYS_Config> sys_configs)
        {

            int count = 0;
            try
            {

                foreach (SYS_Config sys_config in sys_configs)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Config_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Config(DbTransaction transaction, SYS_Config sys_config)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_config.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_config.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VALUE, sys_config.Value, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Config_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Config(DbTransaction transaction, List<SYS_Config> sys_configs)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Config sys_config in sys_configs)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Config_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ConfigDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

