//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_RightDataAccess
    {

        private SYS_Right _sys_right;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_FUNCNAME = "FuncName";
        public static string FIELD_TAG = "Tag";
        public static string FIELD_UPDATE = "Update";
        public static string FIELD_CREATE = "Create";
        public static string FIELD_DELETE = "Delete";
        public static string FIELD_APPROVE = "Approve";
        public static string FIELD_MODULEID = "ModuleID";
        public static string FIELD_FuncID = "FuncID";



        #region Private methods

        private static void SetSYS_RightInfo(DbDataReader reader, ref SYS_Right sys_right)
        {
            sys_right.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_right.FuncName = "" + reader[FIELD_FUNCNAME];
            sys_right.Tag = "" + reader[FIELD_TAG];
            sys_right.ModuleID = int.Parse("0" + reader[FIELD_MODULEID]);
            sys_right.FuncId = "" + reader[FIELD_FuncID];
        }

        private static void SetListSYS_RightInfo(ref DbDataReader reader, ref List<SYS_Right> sys_rights)
        {
            SYS_Right sys_right = null;
            while (reader.Read())
            {
                sys_right = new SYS_Right();
                SYS_RightDataAccess.SetSYS_RightInfo(reader, ref sys_right);
                sys_rights.Add(sys_right);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Right(SYS_Right sys_right)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FuncID, sys_right.FuncId, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Right(List<SYS_Right> sys_rights)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Right sys_right in sys_rights)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FuncID, sys_right.FuncId, false));
                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_right_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Right(SYS_Right sys_right)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                //para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FuncID, sys_right.FuncId, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Right(List<SYS_Right> sys_rights)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Right sys_right in sys_rights)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Right_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Right(SYS_Right sys_right)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Right SelectSYS_Right(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Right sys_right = new SYS_Right();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_GetByID]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RightDataAccess.SetSYS_RightInfo(reader, ref sys_right);
                return sys_right;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_Right> SelectAllSYS_Right()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> sys_right = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RightDataAccess.SetListSYS_RightInfoModulName(ref reader, ref sys_right);
                return sys_right;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RightDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_Right(DbTransaction transaction, SYS_Right sys_right)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Right_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Right(DbTransaction transaction, List<SYS_Right> sys_rights)
        {

            int count = 0;
            try
            {

                foreach (SYS_Right sys_right in sys_rights)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Right_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Right(DbTransaction transaction, SYS_Right sys_right)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCNAME, sys_right.FuncName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TAG, sys_right.Tag, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MODULEID, sys_right.ModuleID, false));
                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Right_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Right(DbTransaction transaction, List<SYS_Right> sys_rights)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Right sys_right in sys_rights)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_right.ID, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Right_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }


    }
}

