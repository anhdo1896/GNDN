//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 6.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Thursday, December 13, 2012
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Entity;
using System.Data.Common;

namespace DataAccess
{
    public partial class DonViDataAccess
    {
        public List<DonVi> DonVi_SelectAll_GroupBy_LoaiCS(string IDDonVi)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("IDDonVi", IDDonVi, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectAll_GroupBy_LoaiCS]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonVi_SelectAll_GroupBy_LoaiCS.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByRegionID(int ID)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("ID", ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByRegionID]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByRegionIDAndPhanLoai(int ID, int PhanLoai, int ParentID)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("ID", ID, false));
                para.Add(_DbHelper.CreateParameter("PhanLoai", PhanLoai, false));
                para.Add(_DbHelper.CreateParameter("ParentID", ParentID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByRegionIDAndPhanLoai]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByRegionIDAndPhanLoaiString(int ID, string PhanLoai)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("ID", ID, false));
                para.Add(_DbHelper.CreateParameter("PhanLoai", PhanLoai, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByRegionIDAndPhanLoaiString]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAll_DonViByIDRegion(int IDRegion,int PhanLoai)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("IDRegion", IDRegion, false));
                para.Add(_DbHelper.CreateParameter("PhanLoai", PhanLoai, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SelectAll_DonViByIDRegion]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SelectAll_DonViByIDRegion.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByParentID(int ParentID)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, ParentID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByParentID]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByParentID(int ParentID,int PhanLoai)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, ParentID, false));
                para.Add(_DbHelper.CreateParameter("PhanLoai", PhanLoai, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByParentIDAndPhanLoai]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SYS_Region_Organization_SelectByIDIDRegion(int IDIDRegion)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("IDRegion", IDIDRegion, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_SelectByIDIDRegion]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_Region_Organization_SelectByIDIDRegion.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> DonVi_SelectDVCQ(int ID)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectDVCQ]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonVi_SelectDVCQ.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByParentIDPhanLoai(int ParentID,int PhanLoai)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, PhanLoai, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectByParentIDPhanLoai]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DonVi> SelectAllDonViByPhanLoai(int PhanLoai)
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, PhanLoai, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectAllDVbyPhanLoai]", para.ToArray());
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonVi_SelectAllDVbyPhanLoai.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<DonVi> SelectDonViChuQuanLogin()
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SelectDonViChuQuanLogin]", null);
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonVi_SelectAllDVbyPhanLoai.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

    }
}

