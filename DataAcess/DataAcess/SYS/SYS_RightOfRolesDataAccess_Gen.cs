//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_RightOfRolesDataAccess
    {

        private SYS_RightOfRoles _sys_rightofroles;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ROLEID = "RoleId";
        public static string FIELD_RIGHTID = "RightId";
        public static string FIELD_VIEW = "View";
        public static string FIELD_UPDATE = "Update";
        public static string FIELD_CREATE = "Create";
        public static string FIELD_DELETE = "Delete";
        public static string FIELD_APPROVE = "Approve";
        public static string FIELD_ID = "ID";


        #region Private methods

        private static void SetSYS_RightOfRolesInfo(DbDataReader reader, ref SYS_RightOfRoles sys_rightofroles)
        {
            sys_rightofroles.RoleId = int.Parse("0" + reader[FIELD_ROLEID]);
            sys_rightofroles.RightId = int.Parse("0" + reader[FIELD_RIGHTID]);
            sys_rightofroles.ID = int.Parse("0" + reader[FIELD_ID]);
        }

        private static void SetListSYS_RightOfRolesInfo(ref DbDataReader reader, ref List<SYS_RightOfRoles> sys_rightofroless)
        {
            SYS_RightOfRoles sys_rightofroles = null;
            while (reader.Read())
            {
                sys_rightofroles = new SYS_RightOfRoles();
                SYS_RightOfRolesDataAccess.SetSYS_RightOfRolesInfo(reader, ref sys_rightofroles);
                sys_rightofroless.Add(sys_rightofroles);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_RightOfRoles(SYS_RightOfRoles sys_rightofroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfRole_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_RightOfRoles(List<SYS_RightOfRoles> sys_rightofroless)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_RightOfRoles sys_rightofroles in sys_rightofroless)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_rightofroles_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_RightOfRoles(SYS_RightOfRoles sys_rightofroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfRoles_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_RightOfRoles(List<SYS_RightOfRoles> sys_rightofroless)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_RightOfRoles sys_rightofroles in sys_rightofroless)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_RightOfRoles_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_RightOfRoles(SYS_RightOfRoles sys_rightofroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfRoles_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_RightOfRoles SelectSYS_RightOfRoles(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();

            SYS_RightOfRoles sys_rightofroles = new SYS_RightOfRoles();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfRoles_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RightOfRolesDataAccess.SetSYS_RightOfRolesInfo(reader, ref sys_rightofroles);
                return sys_rightofroles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_RightOfRoles> SelectAllSYS_RightOfRoles()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_RightOfRoles> sys_rightofroles = new List<SYS_RightOfRoles>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfRoles_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RightOfRolesDataAccess.SetListSYS_RightOfRolesInfo(ref reader, ref sys_rightofroles);
                return sys_rightofroles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RightOfRolesDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_RightOfRoles(DbTransaction transaction, SYS_RightOfRoles sys_rightofroles)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfRoles_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_RightOfRoles(DbTransaction transaction, List<SYS_RightOfRoles> sys_rightofroless)
        {

            int count = 0;
            try
            {

                foreach (SYS_RightOfRoles sys_rightofroles in sys_rightofroless)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfRoles_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_RightOfRoles(DbTransaction transaction, SYS_RightOfRoles sys_rightofroles)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_rightofroles.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofroles.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofroles.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofroles.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofroles.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofroles.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofroles.Approve, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofroles.ID, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfRoles_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_RightOfRoles(DbTransaction transaction, List<SYS_RightOfRoles> sys_rightofroless)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_RightOfRoles sys_rightofroles in sys_rightofroless)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfRoles_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfRolesDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

