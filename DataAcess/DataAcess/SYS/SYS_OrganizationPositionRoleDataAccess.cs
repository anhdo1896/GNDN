//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Entity;

namespace DataAccess
{
    public partial class SYS_OrganizationPositionRoleDataAccess 
    {
        
        public int InsertOfRoleSYS_OrganizationPositionRole(SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_InsertOfRole]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.InsertOfRole: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

       

        public void DeleteOfRoleSYS_OrganizationPositionRole(List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_OrganizationPositionRole sys_organizationpositionrole in sys_organizationpositionroles)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_DeleteOfRole]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.DeleteByRole: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }



        public List<SYS_Roles> SelectAllSYS_OrganizationPositionRole_NotOfRoles(SYS_OrganizationPositionRole sys_organizationpositionroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionroles.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionroles.PositionId, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_GetByNotRole]", para.ToArray());
                if (reader.HasRows)
                    SetListSYS_RolesInfo(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.GetNotOfRole: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        private static void SetListSYS_RolesInfo(ref DbDataReader reader, ref List<SYS_Roles> sys_roless)
        {
            SYS_Roles sys_roles = null;
            while (reader.Read())
            {
                sys_roles = new SYS_Roles();
                SetSYS_RolesInfo(reader, ref sys_roles);
                sys_roless.Add(sys_roles);
            }
        }
       
        private static void SetSYS_RolesInfo(DbDataReader reader, ref SYS_Roles sys_roles)
        {
            sys_roles.ID = int.Parse("0" + reader["ID"]);
            sys_roles.Name = "" + reader["Name"];  
        }

        public List<SYS_Roles> SelectAllSYS_OrganizationPositionRole_OfRoles(SYS_OrganizationPositionRole sys_organizationpositionroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionroles.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionroles.PositionId, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_GetByOfRole]", para.ToArray());
                if (reader.HasRows)
                    SetListSYS_RolesInfo(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.GetOfRole: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_OrganizationPositionRole> SelectByOP(int organization, int position)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_OrganizationPositionRole> sys_organizationpositionrole = new List<SYS_OrganizationPositionRole>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, organization, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, position, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_SelectByOP]", (DbParameter[])para.ToArray());
                if (reader.HasRows)
                    SYS_OrganizationPositionRoleDataAccess.SetListSYS_OrganizationPositionRoleInfo(ref reader, ref sys_organizationpositionrole);
                return sys_organizationpositionrole;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_OrganizationPositionRoleDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
    }
}


