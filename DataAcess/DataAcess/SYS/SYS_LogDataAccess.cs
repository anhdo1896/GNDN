//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Monday, July 05, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Entity;
using System.Collections;

namespace DataAccess
{
    public partial class SYS_LogDataAccess
    {
        public List<SYS_Log> SelectFullSYS_Log(int ID)
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, ID, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectFull]", para.ToArray());
                if (reader.HasRows)
                {

                    while (reader.Read())
                    {
                        var temp = new SYS_Log();
                        SetSYS_LogInfo(reader, ref temp);
                        temp.Username = reader["Username"].ToString();
                        temp.FuncName = reader["FuncName"].ToString();

                        sys_log.Add(temp);
                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectFull: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }
        public SYS_Log SelectSYS_Log(int ID)
        {
            SYS_Log sys_log = new SYS_Log();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_LogDataAccess.SetSYS_LogInfo(reader, ref sys_log);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }
        public SYS_Log SelectAllSYS_Log_ByActionAndIDBC(int IDBC,int Action)
        {
            SYS_Log sys_log = new SYS_Log();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, Action, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectAllByActionAndIDBC]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_LogDataAccess.SetSYS_LogInfo( reader, ref sys_log);
                return sys_log;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            } return sys_log;
        }

        public List<SYS_Log> SelectAllSYS_Log()
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_LogDataAccess.SetListSYS_LogInfo(ref reader, ref sys_log);
                return sys_log;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            } return sys_log;
        }
        public List<SYS_Log> SelectFullSYS_Logstr(string connect)
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(connect);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectFull]", (DbParameter[])null);
                if (reader.HasRows)
                {

                    while (reader.Read())
                    {
                        var temp = new SYS_Log();
                        SetSYS_LogInfo(reader, ref temp);
                        temp.Username = reader["Username"].ToString();
                        temp.FuncName = reader["FuncName"].ToString();

                        sys_log.Add(temp);
                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectFull: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }
        public SYS_Log SelectSYS_Logstr(string connect, int ID)
        {
            SYS_Log sys_log = new SYS_Log();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(connect);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_LogDataAccess.SetSYS_LogInfo(reader, ref sys_log);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }


        public List<SYS_Log> SelectAllSYS_Logstr(string connect)
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(connect);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_LogDataAccess.SetListSYS_LogInfo(ref reader, ref sys_log);
                return sys_log;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            } return sys_log;
        }
        public int InsertSYS_Logstr(SYS_Log sys_log, string connect)
        {
            DbConnection connection = _DbHelper.CreateConnection(connect);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(connection, Common.DatabaseSchema + "[SYS_Log_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                connection.Close();
            }
        }

        public int UpdateSYS_Logstr(List<SYS_Log> sys_logs, string connect)
        {
            DbConnection conn = _DbHelper.CreateConnection(connect);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Log sys_log in sys_logs)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_log_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Logstr(SYS_Log sys_log, string connect)
        {
            DbConnection conn = _DbHelper.CreateConnection(connect);
            conn.Open();

            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));

                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Logstr(List<SYS_Log> sys_logs, string connect)
        {
            DbConnection conn = _DbHelper.CreateConnection(connect);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Log sys_log in sys_logs)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Logstr(SYS_Log sys_log, string connect)
        {
            DbConnection conn = _DbHelper.CreateConnection(connect);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();
            para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
            _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
            conn.Close();
        }

        public void DeleteSYS_Logstr(int id, string connect)
        {
            DbConnection conn = _DbHelper.CreateConnection(connect);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();
            para.Add(_DbHelper.CreateParameter(FIELD_ID, id, false));
            _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
            conn.Close();
        }

        public void DeleteSYS_Logstr(int id)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();
            para.Add(_DbHelper.CreateParameter(FIELD_ID, id, false));
            _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
            conn.Close();
        }


        public List<SYS_Log> SelectSYSLogByIDBCPhanLoai(int IDBC,int phanLoai)
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, phanLoai, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectAllbyIDBCPhanLoai]", para.ToArray());
                if (reader.HasRows)
                {

                    while (reader.Read())
                    {
                        var temp = new SYS_Log();
                        SetSYS_LogInfo(reader, ref temp);
                        //temp.Username = reader["Username"].ToString();
                        //temp.FuncName = reader["FuncName"].ToString();

                        sys_log.Add(temp);
                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectFull: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }

        public List<SYS_Log> SelectSYSLogByIDBC(int IDBC)
        {
            List<SYS_Log> sys_log = new List<SYS_Log>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, IDBC, false));
                
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Log_SelectAllbyIDBC]", para.ToArray());
                if (reader.HasRows)
                {

                    while (reader.Read())
                    {
                        var temp = new SYS_Log();
                        SetSYS_LogInfo(reader, ref temp);
                        //temp.Username = reader["Username"].ToString();
                        //temp.FuncName = reader["FuncName"].ToString();

                        sys_log.Add(temp);
                    }
                }


            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectFull: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_log;
        }

        public DataTable SelectSYSLogAllByIDBCPhanLoai(int IDBC, int phanLoai)
        {
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                ArrayList para = new ArrayList();
                para.Add(_DbHelper.CreateParam(FIELD_IDBC, SqlDbType.Int, IDBC));
                para.Add(_DbHelper.CreateParam("PhanLoai", SqlDbType.Int, phanLoai));
                DataTable dt = _DbHelper.RunProcedureGetTable(connection, Common.DatabaseSchema + "[SYS_Log_SelectAllbyIDBCPhanLoai]", para);
                return dt;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SelectSYSLogByIDBCPhanLoai: {0}", ex.Message));
            }
            finally
            {
                connection.Close();
            }

        }

        

    }
}


