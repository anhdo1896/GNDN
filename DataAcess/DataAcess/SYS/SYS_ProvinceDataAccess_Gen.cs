//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 6.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Thursday, November 21, 2013
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class SYS_ProvinceDataAccess
    {

        private SYS_Province _sys_province;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";
        public static string FIELD_PARENTID = "ParentID";
        public static string FIELD_CODE = "Code";


        #region Private methods

        private static void SetSYS_ProvinceInfo(DbDataReader reader, ref SYS_Province sys_province)
        {
            sys_province.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_province.Name = "" + reader[FIELD_NAME];
            sys_province.ParentID = int.Parse("0" + reader[FIELD_PARENTID]);
            sys_province.Code = "" + reader[FIELD_CODE];
        }

        private static void SetListSYS_ProvinceInfo(ref DbDataReader reader, ref List<SYS_Province> sys_provinces)
        {
            SYS_Province sys_province = null;
            while (reader.Read())
            {
                sys_province = new SYS_Province();
                SYS_ProvinceDataAccess.SetSYS_ProvinceInfo(reader, ref sys_province);
                sys_provinces.Add(sys_province);
            }
        }

        private static void SetBindingListSYS_ProvinceInfo(ref DbDataReader reader, ref BindingList<SYS_Province> sys_provinces)
        {
            SYS_Province sys_province = null;
            while (reader.Read())
            {
                sys_province = new SYS_Province();
                SYS_ProvinceDataAccess.SetSYS_ProvinceInfo(reader, ref sys_province);
                sys_provinces.Add(sys_province);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Province(SYS_Province sys_province)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Province_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Province(List<SYS_Province> sys_provinces)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Province sys_province in sys_provinces)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_province_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Province(SYS_Province sys_province)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));

                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Province_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Province(List<SYS_Province> sys_provinces)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Province sys_province in sys_provinces)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Province_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Province(SYS_Province sys_province)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {

                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Province_Delete]", para.ToArray());
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public SYS_Province SelectSYS_Province(int ID)
        {

            SYS_Province sys_province = new SYS_Province();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Province_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_ProvinceDataAccess.SetSYS_ProvinceInfo(reader, ref sys_province);
                return sys_province;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_Province> SelectAllSYS_Province()
        {
            List<SYS_Province> sys_province = new List<SYS_Province>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Province_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_ProvinceDataAccess.SetListSYS_ProvinceInfo(ref reader, ref sys_province);
                return sys_province;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_ProvinceDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<SYS_Province> SelectBindingAllSYS_Province()
        {
            BindingList<SYS_Province> sys_province = new BindingList<SYS_Province>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Province_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_ProvinceDataAccess.SetBindingListSYS_ProvinceInfo(ref reader, ref sys_province);
                return sys_province;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_ProvinceDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertSYS_Province(DbTransaction transaction, SYS_Province sys_province)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Province_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Province(DbTransaction transaction, List<SYS_Province> sys_provinces)
        {

            int count = 0;
            try
            {

                foreach (SYS_Province sys_province in sys_provinces)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Province_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Province(DbTransaction transaction, SYS_Province sys_province)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_province.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_province.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_province.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_province.Code, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Province_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Province(DbTransaction transaction, List<SYS_Province> sys_provinces)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Province sys_province in sys_provinces)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Province_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ProvinceDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

