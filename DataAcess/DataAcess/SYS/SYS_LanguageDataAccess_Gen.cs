//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 26, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_LanguageDataAccess
    {

        private SYS_Language _sys_language;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";
        public static string FIELD_CODE = "Code";
        public static string FIELD_ISDEFAULT = "IsDefault";
        public static string FIELD_PATH = "Path";


        #region Private methods

        private static void SetSYS_LanguageInfo(DbDataReader reader, ref SYS_Language sys_language)
        {
            sys_language.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_language.Name = "" + reader[FIELD_NAME];
            sys_language.Code = "" + reader[FIELD_CODE];
            sys_language.Path = "" + reader[FIELD_PATH];
        }

        private static void SetListSYS_LanguageInfo(ref DbDataReader reader, ref List<SYS_Language> sys_languages)
        {
            SYS_Language sys_language = null;
            while (reader.Read())
            {
                sys_language = new SYS_Language();
                SYS_LanguageDataAccess.SetSYS_LanguageInfo(reader, ref sys_language);
                sys_languages.Add(sys_language);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Language(SYS_Language sys_language)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Language_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Language(List<SYS_Language> sys_languages)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Language sys_language in sys_languages)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_language_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Language(SYS_Language sys_language)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();

            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Language_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Language(List<SYS_Language> sys_languages)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Language sys_language in sys_languages)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Language_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Language(SYS_Language sys_language)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Language_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }



        public int InsertSYS_Language(DbTransaction transaction, SYS_Language sys_language)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Language_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Language(DbTransaction transaction, List<SYS_Language> sys_languages)
        {

            int count = 0;
            try
            {

                foreach (SYS_Language sys_language in sys_languages)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Language_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Language(DbTransaction transaction, SYS_Language sys_language)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_language.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_language.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_language.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISDEFAULT, sys_language.IsDefault, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PATH, sys_language.Path, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Language_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Language(DbTransaction transaction, List<SYS_Language> sys_languages)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Language sys_language in sys_languages)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Language_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LanguageDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}