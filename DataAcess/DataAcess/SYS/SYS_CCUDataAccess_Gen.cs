//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 6.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Wednesday, August 21, 2013
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class SYS_CCUDataAccess
    {

        private SYS_CCU _sys_ccu;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_TIME = "Time";
        public static string FIELD_TOTALREQUEST = "TotalRequest";
        public static string FIELD_TOTALONLINE = "TotalOnline";
        public static string FIELD_ONLINE = "Online";


        #region Private methods

        private static void SetSYS_CCUInfo(DbDataReader reader, ref SYS_CCU sys_ccu)
        {
            sys_ccu.ID = int.Parse("0" + reader[FIELD_ID]);
            DateTime Time = (DateTime)reader[FIELD_TIME];
            sys_ccu.Time = Time != null ? (DateTime)Time : DateTime.Now;
            sys_ccu.TotalRequest = int.Parse("0" + reader[FIELD_TOTALREQUEST]);
            sys_ccu.TotalOnline = int.Parse("0" + reader[FIELD_TOTALONLINE]);
            sys_ccu.Online = int.Parse("0" + reader[FIELD_ONLINE]);
        }

        private static void SetListSYS_CCUInfo(ref DbDataReader reader, ref List<SYS_CCU> sys_ccus)
        {
            SYS_CCU sys_ccu = null;
            while (reader.Read())
            {
                sys_ccu = new SYS_CCU();
                SYS_CCUDataAccess.SetSYS_CCUInfo(reader, ref sys_ccu);
                sys_ccus.Add(sys_ccu);
            }
        }

        private static void SetBindingListSYS_CCUInfo(ref DbDataReader reader, ref BindingList<SYS_CCU> sys_ccus)
        {
            SYS_CCU sys_ccu = null;
            while (reader.Read())
            {
                sys_ccu = new SYS_CCU();
                SYS_CCUDataAccess.SetSYS_CCUInfo(reader, ref sys_ccu);
                sys_ccus.Add(sys_ccu);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_CCU(SYS_CCU sys_ccu)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_CCU_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_CCU(List<SYS_CCU> sys_ccus)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_CCU sys_ccu in sys_ccus)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_ccu_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_CCU(SYS_CCU sys_ccu)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_CCU_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_CCU(List<SYS_CCU> sys_ccus)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_CCU sys_ccu in sys_ccus)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_CCU_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_CCU(SYS_CCU sys_ccu)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {

                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_CCU_Delete]", para.ToArray());
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public SYS_CCU SelectSYS_CCU(int ID)
        {

            SYS_CCU sys_ccu = new SYS_CCU();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_CCU_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_CCUDataAccess.SetSYS_CCUInfo(reader, ref sys_ccu);
                return sys_ccu;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_CCU> SelectAllSYS_CCU()
        {
            List<SYS_CCU> sys_ccu = new List<SYS_CCU>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_CCU_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_CCUDataAccess.SetListSYS_CCUInfo(ref reader, ref sys_ccu);
                return sys_ccu;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_CCUDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<SYS_CCU> SelectBindingAllSYS_CCU()
        {
            BindingList<SYS_CCU> sys_ccu = new BindingList<SYS_CCU>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_CCU_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_CCUDataAccess.SetBindingListSYS_CCUInfo(ref reader, ref sys_ccu);
                return sys_ccu;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_CCUDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertSYS_CCU(DbTransaction transaction, SYS_CCU sys_ccu)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));
                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_CCU_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_CCU(DbTransaction transaction, List<SYS_CCU> sys_ccus)
        {

            int count = 0;
            try
            {

                foreach (SYS_CCU sys_ccu in sys_ccus)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_CCU_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_CCU(DbTransaction transaction, SYS_CCU sys_ccu)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_ccu.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_ccu.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALREQUEST, sys_ccu.TotalRequest, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TOTALONLINE, sys_ccu.TotalOnline, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ONLINE, sys_ccu.Online, false));
                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_CCU_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_CCU(DbTransaction transaction, List<SYS_CCU> sys_ccus)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_CCU sys_ccu in sys_ccus)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_CCU_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_CCUDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

