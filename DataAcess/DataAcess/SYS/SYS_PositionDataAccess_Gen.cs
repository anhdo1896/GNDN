//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_PositionDataAccess
    {

        private SYS_Position _sys_position;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";


        #region Private methods

        private static void SetSYS_PositionInfo(DbDataReader reader, ref SYS_Position sys_position)
        {
            sys_position.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_position.Name = "" + reader[FIELD_NAME];
        }

        private static void SetListSYS_PositionInfo(ref DbDataReader reader, ref List<SYS_Position> sys_positions)
        {
            SYS_Position sys_position = null;
            while (reader.Read())
            {
                sys_position = new SYS_Position();
                SYS_PositionDataAccess.SetSYS_PositionInfo(reader, ref sys_position);
                sys_positions.Add(sys_position);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Position(SYS_Position sys_position)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Position_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Position(List<SYS_Position> sys_positions)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Position sys_position in sys_positions)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_position_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Position(SYS_Position sys_position)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Position_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Position(List<SYS_Position> sys_positions)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Position sys_position in sys_positions)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Position_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Position(SYS_Position sys_position)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Position_Delete]", para.ToArray());
            }
            catch (Exception)
            {


                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Position SelectSYS_Position(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Position sys_position = new SYS_Position();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Position_GetByID]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_PositionDataAccess.SetSYS_PositionInfo(reader, ref sys_position);
                return sys_position;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_Position> SelectAllSYS_Position()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Position> sys_position = new List<SYS_Position>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Position_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_PositionDataAccess.SetListSYS_PositionInfo(ref reader, ref sys_position);
                return sys_position;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_PositionDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_Position(DbTransaction transaction, SYS_Position sys_position)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Position_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Position(DbTransaction transaction, List<SYS_Position> sys_positions)
        {

            int count = 0;
            try
            {

                foreach (SYS_Position sys_position in sys_positions)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Position_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Position(DbTransaction transaction, SYS_Position sys_position)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_position.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_position.Name, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Position_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Position(DbTransaction transaction, List<SYS_Position> sys_positions)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Position sys_position in sys_positions)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Position_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_PositionDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

