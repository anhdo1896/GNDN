//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_RolesDataAccess
    {

        private SYS_Roles _sys_roles;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";
        public static string FIELD_IDORGANIZATION = "IDOrganization";

        #region Private methods

        private static void SetSYS_RolesInfo(DbDataReader reader, ref SYS_Roles sys_roles)
        {
            sys_roles.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_roles.Name = "" + reader[FIELD_NAME];
            sys_roles.IDOrganization = int.Parse("0" + reader[FIELD_IDORGANIZATION]);
            SYS_RightDataAccess sysRightDataAccess = new SYS_RightDataAccess();
            sys_roles.Right = sysRightDataAccess.GetRightsByRole(sys_roles);
        }

        private static void SetListSYS_RolesInfo(ref DbDataReader reader, ref List<SYS_Roles> sys_roless)
        {
            SYS_Roles sys_roles = null;
            while (reader.Read())
            {
                sys_roles = new SYS_Roles();
                SYS_RolesDataAccess.SetSYS_RolesInfo(reader, ref sys_roles);
                sys_roless.Add(sys_roles);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Roles(SYS_Roles sys_roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_roles.IDOrganization, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Roles(List<SYS_Roles> sys_roless)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Roles sys_roles in sys_roless)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_roles_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Roles(SYS_Roles sys_roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_roles.IDOrganization, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Roles(List<SYS_Roles> sys_roless)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Roles sys_roles in sys_roless)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Roles_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Roles(SYS_Roles sys_roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Roles SelectSYS_Roles(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Roles sys_roles = new SYS_Roles();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_GetByID]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RolesDataAccess.SetSYS_RolesInfo(reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }
        public List<SYS_Roles> SelectAllSYS_RolesAll()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RolesDataAccess.SetListSYS_RolesInfo(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RolesDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_Roles> SelectAllSYS_Roles()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RolesDataAccess.SetListSYS_RolesInfoAll(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RolesDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_Roles(DbTransaction transaction, SYS_Roles sys_roles)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Roles_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Roles(DbTransaction transaction, List<SYS_Roles> sys_roless)
        {

            int count = 0;
            try
            {

                foreach (SYS_Roles sys_roles in sys_roless)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Roles_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Roles(DbTransaction transaction, SYS_Roles sys_roles)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_roles.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_roles.Name, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Roles_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Roles(DbTransaction transaction, List<SYS_Roles> sys_roless)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Roles sys_roles in sys_roless)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Roles_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

