//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Monday, July 05, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Entity;

namespace DataAccess
{
    public partial class SYS_RightDataAccess
    {

        #region public
        public List<SYS_Right> GetAllRightsByUser(int IDuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                //para.Add(_DbHelper.CreateParameter("UserName", user.UserName, false));
                para.Add(_DbHelper.CreateParameter("ID", IDuser, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ALLRight_GetByUserID]", para.ToArray());
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = Boolean.Parse(reader[FIELD_APPROVE].ToString());
                        temp.IsDelete = Boolean.Parse(reader[FIELD_DELETE].ToString());
                        temp.IsCreate = Boolean.Parse(reader[FIELD_CREATE].ToString());
                        temp.IsUpdate = Boolean.Parse(reader[FIELD_UPDATE].ToString());
                        temp.ModuleID = int.Parse(reader[FIELD_MODULEID] + "");
                        result.Add(temp);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_Right> GetAllRightsByUser(SYS_User user, string connect)
        {
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            SYS_ConfigConnectionDataAccess connectionDataAccess = new SYS_ConfigConnectionDataAccess();
            connect = connectionDataAccess.DecryptSYS_ConfigConnection(connect);
            DbConnection dbConnection = Common.CreateConnection(connect);
            dbConnection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserName", user.UserName, false));
                reader = _DbHelper.ExecuteReader(dbConnection, Common.DatabaseSchema + "[SYS_ALLRight_GetByUser]", para.ToArray());
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = Boolean.Parse(reader[FIELD_APPROVE].ToString());
                        temp.IsDelete = Boolean.Parse(reader[FIELD_DELETE].ToString());
                        temp.IsCreate = Boolean.Parse(reader[FIELD_CREATE].ToString());
                        temp.IsUpdate = Boolean.Parse(reader[FIELD_UPDATE].ToString());
                        temp.ModuleID = int.Parse(reader[FIELD_MODULEID] + "");
                        result.Add(temp);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                dbConnection.Close();
            }
        }

        public List<SYS_Right> GetRightsByUser(int IDuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", IDuser, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_GetByUser]", para.ToArray());
                if (reader.HasRows)
                {
                    SYS_ModunDataAccess modunDataAccess = new SYS_ModunDataAccess();
                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = Boolean.Parse(reader[FIELD_APPROVE].ToString());
                        temp.IsDelete = Boolean.Parse(reader[FIELD_DELETE].ToString());
                        temp.IsCreate = Boolean.Parse(reader[FIELD_CREATE].ToString());
                        temp.IsUpdate = Boolean.Parse(reader[FIELD_UPDATE].ToString());
                        temp.SysModun = modunDataAccess.SelectSYS_Modun(temp.ModuleID, conn);
                        temp.ModuleName = temp.SysModun.Name;
                        result.Add(temp);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_Right> GetRightsByNotUser(SYS_User user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", user.ID, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_GetByNotUser]", para.ToArray());
                if (reader.HasRows)
                {
                    SYS_ModunDataAccess modunDataAccess = new SYS_ModunDataAccess();

                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = false;
                        temp.IsDelete = false;
                        temp.IsCreate = false;
                        temp.IsUpdate = false;
                        temp.SysModun = modunDataAccess.SelectSYS_Modun(temp.ModuleID, conn);
                        temp.ModuleName = temp.SysModun.Name;
                        result.Add(temp);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByNotUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_Right> GetRightsByRole(SYS_Roles roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("RoleID", roles.ID, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_GetRightsByRole]", para.ToArray());
                if (reader.HasRows)
                {
                    SYS_ModunDataAccess modunDataAccess = new SYS_ModunDataAccess();
                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = Boolean.Parse(reader[FIELD_APPROVE].ToString());
                        temp.IsDelete = Boolean.Parse(reader[FIELD_DELETE].ToString());
                        temp.IsCreate = Boolean.Parse(reader[FIELD_CREATE].ToString());
                        temp.IsUpdate = Boolean.Parse(reader[FIELD_UPDATE].ToString());
                        temp.SysModun = modunDataAccess.SelectSYS_ModunTest(temp.ModuleID);

                        if (temp.SysModun != null)
                        {
                            temp.ModuleName = temp.SysModun.Name;
                        }

                        result.Add(temp);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByRole: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<SYS_Right> GetRightsByNotRole(SYS_Roles roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Right> result = new List<SYS_Right>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("RoleID", roles.ID, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_GetRightsByNotRole]", para.ToArray());
                if (reader.HasRows)
                {
                    SYS_ModunDataAccess modunDataAccess = new SYS_ModunDataAccess();
                    while (reader.Read())
                    {
                        SYS_Right temp = new SYS_Right();
                        SetSYS_RightInfo(reader, ref temp);
                        temp.IsApprove = false;
                        temp.IsDelete = false;
                        temp.IsCreate = false;
                        temp.IsUpdate = false;
                       // temp.SysModun = modunDataAccess.SelectSYS_Modun(temp.ModuleID, conn);
                        temp.SysModun = modunDataAccess.SelectSYS_ModunTest(temp.ModuleID);
                        temp.ModuleName = temp.SysModun.Name;
                        result.Add(temp);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightDataAccess.GetRightsByNotRole: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public void UpdateRightsOfRole(SYS_Roles roles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            try
            {
                conn.Open();
                //xóa right
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("RoleID", roles.ID, false));
                _DbHelper.ExecuteNonQuery(conn,
                                          Common.DatabaseSchema + "[SYS_Role_DeleteRightsOfRole]", para.ToArray());
                //thêm lại right
                foreach (SYS_Right right in roles.Right)
                {
                    para = new List<DbParameter>();
                    para.Add(_DbHelper.CreateParameter("RoleID", roles.ID, false));
                    para.Add(_DbHelper.CreateParameter("RightID", right.ID, false));
                    para.Add(_DbHelper.CreateParameter("IsApprove", right.IsApprove, false));
                    para.Add(_DbHelper.CreateParameter("IsCreate", right.IsCreate, false));
                    para.Add(_DbHelper.CreateParameter("IsDelete", right.IsDelete, false));
                    para.Add(_DbHelper.CreateParameter("IsUpdate", right.IsUpdate, false));
                    //para.Add(_DbHelper.CreateParameter("ModuleID", right.ModuleID, false));
                    _DbHelper.ExecuteNonQuery(conn,
                                              Common.DatabaseSchema + "[SYS_Role_InsertRightsOfRole]", para.ToArray());
                }

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("RightDataAccess.UpdateRightsByUser: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

        //public int SelectMaxTag()
        //{
        //    try
        //    {
        //        DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
        //        DataTable dt = _DbHelper.RunProcedureGet(conn,"[SYS_Right_SelectMaxTag]", null);

        //        return 1;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(String.Format("SelectMaxTag: {0}", ex.Message));
        //    }
        //}

        public int SelectMaxTag()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_SelectMaxTag]", para.ToArray());
                return (int)ouput.Value;

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RightDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        #endregion

        private static void SetListSYS_RightInfoModulName(ref DbDataReader reader, ref List<SYS_Right> sys_rights)
        {
            SYS_Right sys_right = null;
            SYS_ModunDataAccess isysModunDataAccess = new SYS_ModunDataAccess();
            SYS_Modun sysModun = new SYS_Modun();
            while (reader.Read())
            {
                sys_right = new SYS_Right();
                SYS_RightDataAccess.SetSYS_RightInfo(reader, ref sys_right);
                sysModun = isysModunDataAccess.SelectSYS_Modun(sys_right.ModuleID);
                sys_right.ModuleName = sysModun.Name;
                sys_rights.Add(sys_right);
            }
        }

        public int SelectMaxFuncID()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Right_SelectMaxFuncID]", para.ToArray());
                return (int)ouput.Value;

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RightDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

    }
}


