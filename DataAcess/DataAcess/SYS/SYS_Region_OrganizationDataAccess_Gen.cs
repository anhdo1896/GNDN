//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Friday, May 20, 2011
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_Region_OrganizationDataAccess
    {

        private SYS_Region_Organization _sys_region_organization;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_IDREGION = "IDRegion";
        public static string FIELD_IDORGANIZATION = "IDOrganization";


        #region Private methods

        private static void SetSYS_Region_OrganizationInfo(DbDataReader reader, ref SYS_Region_Organization sys_region_organization)
        {
            sys_region_organization.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_region_organization.IDRegion = int.Parse("0" + reader[FIELD_IDREGION]);
            sys_region_organization.IDOrganization = int.Parse("0" + reader[FIELD_IDORGANIZATION]);
        }

        private static void SetListSYS_Region_OrganizationInfo(ref DbDataReader reader, ref List<SYS_Region_Organization> sys_region_organizations)
        {
            SYS_Region_Organization sys_region_organization = null;
            while (reader.Read())
            {
                sys_region_organization = new SYS_Region_Organization();
                SYS_Region_OrganizationDataAccess.SetSYS_Region_OrganizationInfo(reader, ref sys_region_organization);
                sys_region_organizations.Add(sys_region_organization);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Region_Organization(SYS_Region_Organization sys_region_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Region_Organization(List<SYS_Region_Organization> sys_region_organizations)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Region_Organization sys_region_organization in sys_region_organizations)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_region_organization_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Region_Organization(SYS_Region_Organization sys_region_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

        public void DeleteSYS_Region_Organization(List<SYS_Region_Organization> sys_region_organizations)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Region_Organization sys_region_organization in sys_region_organizations)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Region_Organization_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Region_Organization(SYS_Region_Organization sys_region_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_Delete]", para.ToArray());
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Region_Organization SelectSYS_Region_Organization(int ID)
        {

            SYS_Region_Organization sys_region_organization = new SYS_Region_Organization();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_Region_OrganizationDataAccess.SetSYS_Region_OrganizationInfo(reader, ref sys_region_organization);
                return sys_region_organization;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_Region_Organization> SelectAllSYS_Region_Organization()
        {
            List<SYS_Region_Organization> sys_region_organization = new List<SYS_Region_Organization>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Region_Organization_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_Region_OrganizationDataAccess.SetListSYS_Region_OrganizationInfo(ref reader, ref sys_region_organization);
                return sys_region_organization;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_Region_OrganizationDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_Region_Organization(DbTransaction transaction, SYS_Region_Organization sys_region_organization)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Region_Organization_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Region_Organization(DbTransaction transaction, List<SYS_Region_Organization> sys_region_organizations)
        {

            int count = 0;
            try
            {

                foreach (SYS_Region_Organization sys_region_organization in sys_region_organizations)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Region_Organization_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Region_Organization(DbTransaction transaction, SYS_Region_Organization sys_region_organization)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_region_organization.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDREGION, sys_region_organization.IDRegion, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_region_organization.IDOrganization, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Region_Organization_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Region_Organization(DbTransaction transaction, List<SYS_Region_Organization> sys_region_organizations)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Region_Organization sys_region_organization in sys_region_organizations)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Region_Organization_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Region_OrganizationDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}


