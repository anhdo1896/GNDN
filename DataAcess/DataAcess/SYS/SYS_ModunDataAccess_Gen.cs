//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Tuesday, April 19, 2011
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using DataAccess;
using Entity;


namespace DataAccess
{
    public partial class SYS_ModunDataAccess
    {

        private SYS_Modun _sys_modun;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_CODE = "Code";
        public static string FIELD_NAME = "Name";
        public static string FIELD_CONNECTSTRING = "ConnectString";
        public static string FIELD_IDUSER = "idUser";
        public static string FIELD_USERNAME = "UserName";


        #region Private methods

        private static void SetSYS_ModunInfo(DbDataReader reader, ref SYS_Modun sys_modun)
        {
            sys_modun.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_modun.Code = "" + reader[FIELD_CODE];
            sys_modun.Name = "" + reader[FIELD_NAME];
            sys_modun.ConnectString = "" + reader[FIELD_CONNECTSTRING];
            sys_modun.idUser = int.Parse("0" + reader[FIELD_IDUSER]);
            sys_modun.UserName = "" + reader[FIELD_USERNAME];
        }

        private static void SetListSYS_ModunInfo(ref DbDataReader reader, ref List<SYS_Modun> sys_moduns)
        {
            SYS_Modun sys_modun = null;
            while (reader.Read())
            {
                sys_modun = new SYS_Modun();
                SYS_ModunDataAccess.SetSYS_ModunInfo(reader, ref sys_modun);
                sys_moduns.Add(sys_modun);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Modun(SYS_Modun sys_modun)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Modun_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Modun(List<SYS_Modun> sys_moduns)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Modun sys_modun in sys_moduns)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_modun_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Modun(SYS_Modun sys_modun)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Modun_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Modun(List<SYS_Modun> sys_moduns)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Modun sys_modun in sys_moduns)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Modun_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Modun(SYS_Modun sys_modun)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Modun_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Modun SelectSYS_Modun(int ID)
        {

            SYS_Modun sys_modun = new SYS_Modun();
            DbDataReader reader = null;
            DbConnection connection = Common.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Modun_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_ModunDataAccess.SetSYS_ModunInfo(reader, ref sys_modun);
                return sys_modun;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }

        }


        public List<SYS_Modun> SelectAllSYS_Modun()
        {
            List<SYS_Modun> sys_modun = new List<SYS_Modun>();
            DbDataReader reader = null;
            DbConnection connection = Common.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Modun_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_ModunDataAccess.SetListSYS_ModunInfo(ref reader, ref sys_modun);
                return sys_modun;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_ModunDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
        }

        public int InsertSYS_Modun(DbTransaction transaction, SYS_Modun sys_modun)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Modun_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Modun(DbTransaction transaction, List<SYS_Modun> sys_moduns)
        {

            int count = 0;
            try
            {

                foreach (SYS_Modun sys_modun in sys_moduns)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Modun_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Modun(DbTransaction transaction, SYS_Modun sys_modun)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_modun.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_modun.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_modun.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, sys_modun.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, sys_modun.idUser, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Modun_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Update: {0}", ex.Message));
            }
        }
        public int DeleteSYS_Modun(DbTransaction transaction, List<SYS_Modun> sys_moduns)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Modun sys_Modun in sys_moduns)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Modun_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ModunDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

