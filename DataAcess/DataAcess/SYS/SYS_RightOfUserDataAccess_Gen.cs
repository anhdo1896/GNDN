//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_RightOfUserDataAccess
    {

        private SYS_RightOfUser _sys_rightofuser;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_RIGHTID = "RightId";
        public static string FIELD_USERID = "UserId";
        public static string FIELD_VIEW = "View";
        public static string FIELD_UPDATE = "Update";
        public static string FIELD_CREATE = "Create";
        public static string FIELD_DELETE = "Delete";
        public static string FIELD_APPROVE = "Approve";
        public static string FIELD_ID = "ID";


        #region Private methods

        private static void SetSYS_RightOfUserInfo(DbDataReader reader, ref SYS_RightOfUser sys_rightofuser)
        {
            sys_rightofuser.RightId = int.Parse("0" + reader[FIELD_RIGHTID]);
            sys_rightofuser.UserId = int.Parse("0" + reader[FIELD_USERID]);
            sys_rightofuser.ID = int.Parse("0" + reader[FIELD_ID]);
        }

        private static void SetListSYS_RightOfUserInfo(ref DbDataReader reader, ref List<SYS_RightOfUser> sys_rightofusers)
        {
            SYS_RightOfUser sys_rightofuser = null;
            while (reader.Read())
            {
                sys_rightofuser = new SYS_RightOfUser();
                SYS_RightOfUserDataAccess.SetSYS_RightOfUserInfo(reader, ref sys_rightofuser);
                sys_rightofusers.Add(sys_rightofuser);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_RightOfUser(SYS_RightOfUser sys_rightofuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfUser_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

        public int UpdateSYS_RightOfUser(List<SYS_RightOfUser> sys_rightofusers)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_RightOfUser sys_rightofuser in sys_rightofusers)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_rightofuser_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_RightOfUser(SYS_RightOfUser sys_rightofuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfUser_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_RightOfUser(List<SYS_RightOfUser> sys_rightofusers)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_RightOfUser sys_rightofuser in sys_rightofusers)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_RightOfUser_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_RightOfUser(SYS_RightOfUser sys_rightofuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfUser_Delete]", para.ToArray());
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_RightOfUser SelectSYS_RightOfUser(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();

            SYS_RightOfUser sys_rightofuser = new SYS_RightOfUser();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfUser_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RightOfUserDataAccess.SetSYS_RightOfUserInfo(reader, ref sys_rightofuser);
                return sys_rightofuser;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_RightOfUser> SelectAllSYS_RightOfUser()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_RightOfUser> sys_rightofuser = new List<SYS_RightOfUser>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_RightOfUser_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RightOfUserDataAccess.SetListSYS_RightOfUserInfo(ref reader, ref sys_rightofuser);
                return sys_rightofuser;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RightOfUserDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_RightOfUser(DbTransaction transaction, SYS_RightOfUser sys_rightofuser)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfUser_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_RightOfUser(DbTransaction transaction, List<SYS_RightOfUser> sys_rightofusers)
        {

            int count = 0;
            try
            {

                foreach (SYS_RightOfUser sys_rightofuser in sys_rightofusers)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfUser_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_RightOfUser(DbTransaction transaction, SYS_RightOfUser sys_rightofuser)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_RIGHTID, sys_rightofuser.RightId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_rightofuser.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_VIEW, sys_rightofuser.View, false));
                para.Add(_DbHelper.CreateParameter(FIELD_UPDATE, sys_rightofuser.Update, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CREATE, sys_rightofuser.Create, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DELETE, sys_rightofuser.Delete, false));
                para.Add(_DbHelper.CreateParameter(FIELD_APPROVE, sys_rightofuser.Approve, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_rightofuser.ID, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfUser_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_RightOfUser(DbTransaction transaction, List<SYS_RightOfUser> sys_rightofusers)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_RightOfUser sys_rightofuser in sys_rightofusers)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_RightOfUser_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RightOfUserDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

