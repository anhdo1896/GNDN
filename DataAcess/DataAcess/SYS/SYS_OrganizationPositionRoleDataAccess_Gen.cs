//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_OrganizationPositionRoleDataAccess
    {

        private SYS_OrganizationPositionRole _sys_organizationpositionrole;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ORGANIZATIONID = "OrganizationId";
        public static string FIELD_POSITIONID = "PositionId";
        public static string FIELD_ROLEID = "RoleId";
        public static string FIELD_ID = "ID";



        #region Private methods

        private static void SetSYS_OrganizationPositionRoleInfo(DbDataReader reader, ref SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            sys_organizationpositionrole.OrganizationId = int.Parse("0" + reader[FIELD_ORGANIZATIONID]);
            sys_organizationpositionrole.PositionId = int.Parse("0" + reader[FIELD_POSITIONID]);
            sys_organizationpositionrole.RoleId = int.Parse("0" + reader[FIELD_ROLEID]);
            sys_organizationpositionrole.ID = int.Parse("0" + reader[FIELD_ID]);
        }



        private static void SetListSYS_OrganizationPositionRoleInfo(ref DbDataReader reader, ref List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {
            SYS_OrganizationPositionRole sys_organizationpositionrole = null;
            while (reader.Read())
            {
                sys_organizationpositionrole = new SYS_OrganizationPositionRole();
                SYS_OrganizationPositionRoleDataAccess.SetSYS_OrganizationPositionRoleInfo(reader, ref sys_organizationpositionrole);
                sys_organizationpositionroles.Add(sys_organizationpositionrole);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_OrganizationPositionRole(SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Insert: {0}", ex.Message));
            }
            finally { conn.Close(); }

        }

        public int UpdateSYS_OrganizationPositionRole(List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_OrganizationPositionRole sys_organizationpositionrole in sys_organizationpositionroles)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_organizationpositionrole_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_OrganizationPositionRole(SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_OrganizationPositionRole(List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_OrganizationPositionRole sys_organizationpositionrole in sys_organizationpositionroles)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_OrganizationPositionRole(SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_DeleteOfRole]", para.ToArray());
            }
            catch (Exception)
            {


                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_OrganizationPositionRole SelectSYS_OrganizationPositionRole(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_OrganizationPositionRole sys_organizationpositionrole = new SYS_OrganizationPositionRole();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_OrganizationPositionRoleDataAccess.SetSYS_OrganizationPositionRoleInfo(reader, ref sys_organizationpositionrole);
                return sys_organizationpositionrole;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_OrganizationPositionRole> SelectAllSYS_OrganizationPositionRole()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_OrganizationPositionRole> sys_organizationpositionrole = new List<SYS_OrganizationPositionRole>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_OrganizationPositionRoleDataAccess.SetListSYS_OrganizationPositionRoleInfo(ref reader, ref sys_organizationpositionrole);
                return sys_organizationpositionrole;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_OrganizationPositionRoleDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_OrganizationPositionRole(DbTransaction transaction, SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_OrganizationPositionRole(DbTransaction transaction, List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {

            int count = 0;
            try
            {

                foreach (SYS_OrganizationPositionRole sys_organizationpositionrole in sys_organizationpositionroles)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_OrganizationPositionRole(DbTransaction transaction, SYS_OrganizationPositionRole sys_organizationpositionrole)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ORGANIZATIONID, sys_organizationpositionrole.OrganizationId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_POSITIONID, sys_organizationpositionrole.PositionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ROLEID, sys_organizationpositionrole.RoleId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organizationpositionrole.ID, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_OrganizationPositionRole(DbTransaction transaction, List<SYS_OrganizationPositionRole> sys_organizationpositionroles)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_OrganizationPositionRole sys_organizationpositionrole in sys_organizationpositionroles)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_OrganizationPositionRole_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationPositionRoleDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

