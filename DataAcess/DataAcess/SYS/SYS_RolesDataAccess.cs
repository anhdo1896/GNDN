//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Monday, July 05, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Entity;
using Connection;

namespace DataAccess
{
    public partial class SYS_RolesDataAccess
    {
        #region public

        public SYS_Roles GetRolesByUser(int IDuser)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Roles result = new SYS_Roles();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", IDuser, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectByUserID]", para.ToArray());

                if (reader.HasRows && reader.Read())
                    SetSYS_RolesInfo(reader, ref result);
                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("RoleDataAccess.SelectRolesByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public SYS_Roles GetRolesByUser_Check(SYS_User user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Roles result = new SYS_Roles();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", user.ID, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectByUserID]", para.ToArray());

                if (reader.HasRows && reader.Read())
                    SetSYS_RolesInfo_Check(reader, ref result);
                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("RoleDataAccess.SelectRolesByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        /// <summary>
        /// Hàm cập nhật lại danh sách role của user. Những role không có trong danh sách sẽ bị xóa
        /// </summary>
        /// <param name="user"></param>
        public void UpdateRolesOfUser(SYS_User user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            try
            {
                conn.Open();
                //xóa role
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", user.ID, false));
                _DbHelper.ExecuteNonQuery(conn,
                                          Common.DatabaseSchema + "[SYS_Role_DeleteAllRolesOfUser]", para.ToArray());
                //thêm lại role

                para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", user.ID, false));
                para.Add(_DbHelper.CreateParameter("RoleID", user.Roles.ID, false));
                _DbHelper.ExecuteNonQuery(conn,
                                          Common.DatabaseSchema + "[SYS_Role_InsertRolesOfUser]", para.ToArray());


            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("RoleDataAccess.UpdateRolesByUser: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

        public void DeleteRoleOfUser(int userId, int roleId)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            try
            {
                conn.Open();
                //xóa role
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserID", userId, false));
                para.Add(_DbHelper.CreateParameter("RoleID", roleId, false));
                _DbHelper.ExecuteNonQuery(conn,
                                          Common.DatabaseSchema + "[SYS_Role_DeleteRolesOfUser]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("RoleDataAccess.DeleteRoleOfUser: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }

        }

        #endregion

        public List<SYS_Roles> SelectSYS_RolesByIDOrganization(int IDOrganization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, IDOrganization, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Role_GetByIDOrganization]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RolesDataAccess.SetListSYS_RolesInfo(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.SYS_Role_GetByIDOrganization: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }

        public SYS_Roles SelectSYS_RolesByName(string name)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_Roles sys_roles = new SYS_Roles();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, name, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_GetByName]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_RolesDataAccess.SetSYS_RolesInfo(reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_RolesDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }
        private void SetSYS_RolesInfo_Check(DbDataReader reader, ref SYS_Roles sys_roles)
        {
            sys_roles.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_roles.Name = "" + reader[FIELD_NAME];
            sys_roles.IDOrganization = int.Parse("0" + reader[FIELD_IDORGANIZATION]);
        }

        private void SetListSYS_RolesInfo_Check(ref DbDataReader reader, ref List<SYS_Roles> sys_roless)
        {
            SYS_Roles sys_roles = null;
            while (reader.Read())
            {
                sys_roles = new SYS_Roles();
                SetSYS_RolesInfo_Check(reader, ref sys_roles);
                sys_roless.Add(sys_roles);
            }
        }
        public List<SYS_Roles> SelectListSYS_Roles()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                   SetListSYS_RolesInfo_Check(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RolesDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<SYS_Roles> SelectAllSYS_RolesAllRight()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Roles> sys_roles = new List<SYS_Roles>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Roles_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_RolesDataAccess.SetListSYS_RolesInfoAll(ref reader, ref sys_roles);
                return sys_roles;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_RolesDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        private static void SetListSYS_RolesInfoAll(ref DbDataReader reader, ref List<SYS_Roles> sys_roless)
        {
            SYS_Roles sys_roles = null;
            SYS_RightDataAccess sysRightDataAccess = new SYS_RightDataAccess();

            while (reader.Read())
            {
                sys_roles = new SYS_Roles();
                SYS_RolesDataAccess.SetSYS_RolesInfo(reader, ref sys_roles);
                sys_roles.Right = sysRightDataAccess.GetRightsByRole(sys_roles);
                sys_roless.Add(sys_roles);
            }
        }
    }
}


