//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 4.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Thursday, January 17, 2013
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class SYS_LogDataAccess
    {

        private SYS_Log _sys_log;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_USERID = "UserId";
        public static string FIELD_FUNCTIONID = "FunctionId";
        public static string FIELD_ACTION = "Action";
        public static string FIELD_DESCRIPTION = "Description";
        public static string FIELD_TIME = "Time";
        public static string FIELD_IDBC = "IDBC";
        public static string FIELD_PHANLOAI = "PhanLoai";


        #region Private methods

        private static void SetSYS_LogInfo(DbDataReader reader, ref SYS_Log sys_log)
        {
            sys_log.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_log.UserId = int.Parse("0" + reader[FIELD_USERID]);
            sys_log.FunctionId = int.Parse("0" + reader[FIELD_FUNCTIONID]);
            sys_log.Action = int.Parse("0" + reader[FIELD_ACTION]);
            sys_log.Description = "" + reader[FIELD_DESCRIPTION];
            DateTime Time = (DateTime)reader[FIELD_TIME];
            sys_log.Time = Time != null ? (DateTime)Time : DateTime.Now;
            sys_log.IDBC = int.Parse("0" + reader[FIELD_IDBC]);
            sys_log.PhanLoai = int.Parse("0" + reader[FIELD_PHANLOAI]);

            SYS_UserDataAccess sysUserDataAccess = new SYS_UserDataAccess();
            SYS_User sysUser = sysUserDataAccess.SelectSYS_User(sys_log.UserId);
            sys_log.Username = sysUser.Name;

            SYS_RightDataAccess sysRightDataAccess = new SYS_RightDataAccess();
            SYS_Right sysRight = sysRightDataAccess.SelectSYS_Right(sys_log.FunctionId);
            sys_log.FuncName = sysRight.FuncName;
        }

        private static void SetListSYS_LogInfo(ref DbDataReader reader, ref List<SYS_Log> sys_logs)
        {
            SYS_Log sys_log = null;
            while (reader.Read())
            {
                sys_log = new SYS_Log();
                SYS_LogDataAccess.SetSYS_LogInfo(reader, ref sys_log);
                sys_logs.Add(sys_log);
            }
        }

        private static void SetBindingListSYS_LogInfo(ref DbDataReader reader, ref BindingList<SYS_Log> sys_logs)
        {
            SYS_Log sys_log = null;
            while (reader.Read())
            {
                sys_log = new SYS_Log();
                SYS_LogDataAccess.SetSYS_LogInfo(reader, ref sys_log);
                sys_logs.Add(sys_log);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Log(SYS_Log sys_log)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Log(List<SYS_Log> sys_logs)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Log sys_log in sys_logs)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_log_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Log(SYS_Log sys_log)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Log(List<SYS_Log> sys_logs)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Log sys_log in sys_logs)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Log(SYS_Log sys_log)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            { conn.Close(); }

        }

        //public SYS_Log SelectSYS_Log(int ID)
        //{

        //    SYS_Log sys_log = new SYS_Log();
        //    DbDataReader reader = null;
        //    DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
        //    conn.Open();
        //    try
        //    {
        //        List<DbParameter> para = new List<DbParameter>();
        //        para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

        //        reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_SelectById]", para.ToArray());
        //        if (reader.HasRows && reader.Read())
        //            SYS_LogDataAccess.SetSYS_LogInfo(reader, ref sys_log);
        //        return sys_log;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(String.Format("SYS_LogDataAccess.SelectById: {0}", ex.Message));
        //    }
        //    finally
        //    {
        //        if (reader != null)
        //            reader.Close();
        //            conn.Close();
        //    }			

        //}


        //public List<SYS_Log> SelectAllSYS_Log()
        //{
        //    List<SYS_Log> sys_log = new List<SYS_Log>();
        //   DbDataReader reader = null;
        //DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
        //    conn.Open();
        //    try
        //    {
        //        reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_SelectAll]",(DbParameter[])null);
        //        if (reader.HasRows)
        //            SYS_LogDataAccess.SetListSYS_LogInfo(ref reader, ref sys_log);
        //        return sys_log;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(String.Format(" SYS_LogDataAccess.SelectAll: {0}", ex.Message));
        //    }
        //    finally
        //    {
        //        if (reader != null)
        //            reader.Close();
        //            conn.Close();
        //    }
        //}
        public BindingList<SYS_Log> SelectBindingAllSYS_Log()
        {
            BindingList<SYS_Log> sys_log = new BindingList<SYS_Log>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Log_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_LogDataAccess.SetBindingListSYS_LogInfo(ref reader, ref sys_log);
                return sys_log;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_LogDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertSYS_Log(DbTransaction transaction, SYS_Log sys_log)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Log_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Log(DbTransaction transaction, List<SYS_Log> sys_logs)
        {

            int count = 0;
            try
            {

                foreach (SYS_Log sys_log in sys_logs)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Log_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Log(DbTransaction transaction, SYS_Log sys_log)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_log.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERID, sys_log.UserId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FUNCTIONID, sys_log.FunctionId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ACTION, sys_log.Action, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DESCRIPTION, sys_log.Description, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TIME, sys_log.Time, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDBC, sys_log.IDBC, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, sys_log.PhanLoai, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Log_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Log(DbTransaction transaction, List<SYS_Log> sys_logs)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Log sys_log in sys_logs)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Log_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_LogDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

