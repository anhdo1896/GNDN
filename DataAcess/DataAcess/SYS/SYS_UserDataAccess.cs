//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Monday, July 05, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using Entity;
using System.Data.Common;

namespace DataAccess
{
    public partial class SYS_UserDataAccess
    {

        //[SYS_User_GetByOrganization]
       
        public List<SYS_User> SYS_User_GetByOrganization(int ID)
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_Organization_GetByParentId]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_UserDataAccess.SetListSYS_UserInfo(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_Organization_GetByParentId.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }
        public SYS_User SelectSYS_User(int ID)
        {
            SYS_User sys_user = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }


        public List<SYS_User> SelectAllSYS_User()
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_UserDataAccess.SetListSYS_UserInfo(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_UserDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }

        private static void SetListSYS_UserInfoAll(ref DbDataReader reader, ref List<SYS_User> sys_users)
        {
            SYS_User sys_user;
            SYS_RolesDataAccess sysRolesDataAccess = new SYS_RolesDataAccess();

            while (reader.Read())
            {
                sys_user = new SYS_User();
                SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                sys_user.Roles = sysRolesDataAccess.GetRolesByUser(sys_user.ID);
                sys_users.Add(sys_user);
            }
        }

        public List<SYS_User> SelectAllSYS_User_NotofRoles(int ID)
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("ID", ID, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectAll_NotofRoles]", para.ToArray());
                if (reader.HasRows)
                    SYS_UserDataAccess.SetListSYS_UserInfo(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_UserDataAccess.SelectAll_NotofRoles: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }
        public List<SYS_User> SelectAllSYS_User_IsActive()
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectAll_IsActive]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_UserDataAccess.SetListSYS_UserInfo(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_UserDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            } return sys_user;
        }

        public List<SYS_User> SelectAllSYS_User_ofRoles(int ID)
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("ID", ID, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectAll_ofRoles]", para.ToArray());
                if (reader.HasRows)
                    SYS_UserDataAccess.SetListSYS_UserInfo(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_UserDataAccess.SelectAll_ofRoles: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }
        public string GetPasswordByUser(string userName)
        {
            string result = "";
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter("UserName", userName, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_GetPassByUserName]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    result = reader["Password"].ToString();

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_UserDataAccess.GetPasswordByUser: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return result;
        }
        public SYS_User SelectUserByUserNameOffLine(string userName)
        {
            SYS_User sys_user = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, userName, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectByUserNameOffLine]", para.ToArray());
                if (reader.HasRows && reader.Read())
                {
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                    //SYS_Staff s = new SYS_Staff();
                    //s = sysStaffDataAccess.SelectSYS_Staff(sys_user.ID, connection);
                    //sys_user.IDOrganization = s.OrganizationId;
                    //SYS_OrganizationDataAccess sysOrganizationDataAccess = new SYS_OrganizationDataAccess();
                    //sys_user.Organization = sysOrganizationDataAccess.SelectSYS_Organization(connection, s.OrganizationId);
                }

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectUserByUserNameOffLine: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }
        public SYS_User SelectUserByUserName(string userName)
        {
            SYS_User sys_user = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, userName, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectByUserName]", para.ToArray());
                if (reader.HasRows && reader.Read())
                {
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                }

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectUserByUserName: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }

        public SYS_User SelectUserByUserNameAndIDOrganization(string userName, int IDOrganization)
        {
            SYS_User sys_user = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, userName, false));
                para.Add(_DbHelper.CreateParameter("IDOrganization", IDOrganization, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectByUserNameAndIDOrganization]", para.ToArray());
                if (reader.HasRows && reader.Read())
                {
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                }

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectUserByUserName: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }

        public SYS_User SelectUserByUserNameAndType(string userName, int Type, int IDDonVi)
        {
            SYS_User sys_user = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, userName, false));
                para.Add(_DbHelper.CreateParameter("Type", Type, false));
                para.Add(_DbHelper.CreateParameter("IDDonVi", IDDonVi, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectByUserNameAndType]", para.ToArray());
                if (reader.HasRows && reader.Read())
                {
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                }

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectUserByUserNameAndType: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }

        public SYS_User SelectUserByUserName(string connectionString, string UserName)
        {
            SYS_ConfigConnectionDataAccess connectionDataAccess = new SYS_ConfigConnectionDataAccess();
            connectionString = connectionDataAccess.DecryptSYS_ConfigConnection(connectionString);
            SYS_User sysUser = new SYS_User();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(connectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, UserName, false));
                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_SelectByUserName]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sysUser);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.SelectByUserName: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            } return sysUser;
        }

        public int InsertSYS_UserAll(SYS_User sys_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_RoleOfUserDataAccess sysRoleOfUserDataAccess = new SYS_RoleOfUserDataAccess();
            SYS_RightOfUserDataAccess sysRightOfUserDataAccess = new SYS_RightOfUserDataAccess();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_user.IDOrganization, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Insert]", para.ToArray());
                sys_user.ID = (int)ouput.Value;
                SYS_RoleOfUser sysRoleOfUser = new SYS_RoleOfUser();
                sysRoleOfUser.RoleId = sys_user.Roles.ID;
                //sysRoleOfUser.RoleId = sys_user.IDOrganization;
                sysRoleOfUser.UserId = sys_user.ID;
                if (sys_user.Roles.ID != 0)
                {
                    sysRoleOfUserDataAccess.InsertSYS_RoleOfUser(sysRoleOfUser);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return sys_user.ID;
        }

        public List<SYS_User> SYS_User_GetByIDOrganization(int IDOrganization)
        {
            List<SYS_User> sys_user = new List<SYS_User>();
            DbDataReader reader = null;
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, IDOrganization, false));

                reader = _DbHelper.ExecuteReader(connection, Common.DatabaseSchema + "[SYS_User_GetByIDOrganization]", para.ToArray());
                if (reader.HasRows)
                    SetListSYS_UserInfo_Check(ref reader, ref sys_user);//hoantt  SYS_UserDataAccess.SetListSYS_UserInfoAll(ref reader, ref sys_user);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_User_GetByIDOrganization: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                connection.Close();
            }
            return sys_user;
        }
        private void SetListSYS_UserInfo_Check(ref DbDataReader reader, ref List<SYS_User> sys_users)
        {
            SYS_User sys_user = null;
            while (reader.Read())
            {
                sys_user = new SYS_User();
                SetSYS_UserInfo_Check(reader, ref sys_user);
                sys_users.Add(sys_user);
            }
        }
        private void SetSYS_UserInfo_Check(DbDataReader reader, ref SYS_User sys_user)
        {
            sys_user.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_user.UserName = "" + reader[FIELD_USERNAME];
            sys_user.Password = "" + reader[FIELD_PASSWORD];
            sys_user.FirstName = "" + reader[FIELD_FIRSTNAME];
            sys_user.MidName = "" + reader[FIELD_MIDNAME];
            sys_user.LastName = "" + reader[FIELD_LASTNAME];
            sys_user.NumberPhone = "" + reader[FIELD_NUMBERPHONE];
            sys_user.Email = "" + reader[FIELD_EMAIL];
            sys_user.IsActive = reader[FIELD_ISACTIVE] != DBNull.Value ? Convert.ToBoolean(reader[FIELD_ISACTIVE]) : false;
            sys_user.IDOrganization = int.Parse("0" + reader[FIELD_IDORGANIZATION]);
            // SYS_RolesDataAccess sysRoleDataAccess = new SYS_RolesDataAccess();
            // sys_user.Roles = sysRoleDataAccess.GetRolesByUser(sys_user);
            // sys_user.RoleGroup = sys_user.Roles.Name;
        }
        public void UpdateSYS_UserAll(SYS_User sys_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_user.IDOrganization, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Update]", para.ToArray());
                SYS_RoleOfUserDataAccess sysRoleOfUserDataAccess = new SYS_RoleOfUserDataAccess();
                SYS_RoleOfUser sysRoleOfUser = new SYS_RoleOfUser();
                //SYS_RightOfUserDataAccess sysRightOfUserDataAccess = new SYS_RightOfUserDataAccess();
                SYS_RightOfUser sysRightOfUserID = new SYS_RightOfUser();
                sysRightOfUserID.UserId = sys_user.ID;
                sysRoleOfUser.UserId = sys_user.ID;
                //sysRightOfUserDataAccess.DeleteSYS_RightOfUser; Xóa toàn bộ quyền của User đó
                //sysRightOfUserDataAccess.DeleteSYS_RightOfUserByIDUser(sysRightOfUserID);
                sysRoleOfUserDataAccess.DeleteSYS_RoleOfUserByIDUser(sysRoleOfUser);

                sysRoleOfUser.RoleId = sys_user.Roles.ID;
                sysRoleOfUserDataAccess.InsertSYS_RoleOfUser(sysRoleOfUser);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.UpdateAll: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

    }
}


