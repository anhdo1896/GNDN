//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_UserDataAccess
    {

        private SYS_User _sys_user;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_USERNAME = "UserName";
        public static string FIELD_PASSWORD = "Password";
        public static string FIELD_FIRSTNAME = "FirstName";
        public static string FIELD_MIDNAME = "MidName";
        public static string FIELD_LASTNAME = "LastName";
        public static string FIELD_EMAIL = "Email";
        public static string FIELD_ISACTIVE = "IsActive";
        public static string FIELD_NUMBERPHONE = "NumberPhone";
        public static string FIELD_ROLEGROUP = "RoleGroup";
        public static string FIELD_IDORGANIZATION = "IDOrganization";


        #region Private methods

        private static void SetSYS_UserInfo(DbDataReader reader, ref SYS_User sys_user)
        {
            sys_user.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_user.UserName = "" + reader[FIELD_USERNAME];
            sys_user.Password = "" + reader[FIELD_PASSWORD];
            sys_user.FirstName = "" + reader[FIELD_FIRSTNAME];
            sys_user.MidName = "" + reader[FIELD_MIDNAME];
            sys_user.LastName = "" + reader[FIELD_LASTNAME];
            sys_user.NumberPhone = "" + reader[FIELD_NUMBERPHONE];
            sys_user.Email = "" + reader[FIELD_EMAIL];
            sys_user.IsActive = reader[FIELD_ISACTIVE] != DBNull.Value ? Convert.ToBoolean(reader[FIELD_ISACTIVE]) : false;
            sys_user.IDOrganization = int.Parse("0" + reader[FIELD_IDORGANIZATION]);
            SYS_RolesDataAccess sysRoleDataAccess = new SYS_RolesDataAccess();
            sys_user.Roles = sysRoleDataAccess.GetRolesByUser(sys_user.ID);
            sys_user.RoleGroup = sys_user.Roles.Name;
        }

        private static void SetListSYS_UserInfo(ref DbDataReader reader, ref List<SYS_User> sys_users)
        {
            SYS_User sys_user = null;
            while (reader.Read())
            {
                sys_user = new SYS_User();
                SYS_UserDataAccess.SetSYS_UserInfo(reader, ref sys_user);
                sys_users.Add(sys_user);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_User(SYS_User sys_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_user.IDOrganization, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_User(List<SYS_User> sys_users)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_User sys_user in sys_users)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_user_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_User(SYS_User sys_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDORGANIZATION, sys_user.IDOrganization, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }


        public void UpdateSYS_UserPassWord(int ID, string Password)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, Password, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_UpdatePassWord]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
        public void DeleteSYS_User(List<SYS_User> sys_users)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_User sys_user in sys_users)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_User_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_User(SYS_User sys_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                SYS_RoleOfUserDataAccess sysRoleOfUserDA = new SYS_RoleOfUserDataAccess();
                SYS_RoleOfUser sysRoleOfUser = new SYS_RoleOfUser();
                sysRoleOfUser.UserId = sys_user.ID;
                sysRoleOfUserDA.DeleteSYS_RoleOfUserByIDUser(sysRoleOfUser);

                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Delete]", para.ToArray());
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

        }



        public int InsertSYS_User(DbTransaction transaction, SYS_User sys_user)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_User_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_User(DbTransaction transaction, List<SYS_User> sys_users)
        {

            int count = 0;
            try
            {

                foreach (SYS_User sys_user in sys_users)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_User_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_User(DbTransaction transaction, SYS_User sys_user)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_user.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FIRSTNAME, sys_user.FirstName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MIDNAME, sys_user.MidName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LASTNAME, sys_user.LastName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ISACTIVE, sys_user.IsActive, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NUMBERPHONE, sys_user.NumberPhone, false));
                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_User_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_User(DbTransaction transaction, List<SYS_User> sys_users)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_User sys_user in sys_users)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_User_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

