//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 6.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Thursday, December 13, 2012
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class DonViDataAccess
    {

        private DonVi _donvi;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_TENDV = "TenDV";
        public static string FIELD_DIACHI = "DiaChi";
        public static string FIELD_EMAIL = "Email";
        public static string FIELD_PARENTID = "ParentID";
        public static string FIELD_PHANLOAI = "PhanLoai";
        public static string FIELD_TINH = "IDTinh";
        public static string FIELD_HUYEN = "IDHuyen";
        public static string FIELD_XA = "IDXa";


        #region Private methods

        private static void SetDonViInfo(DbDataReader reader, ref DonVi donvi)
        {
            donvi.ID = int.Parse("0" + reader[FIELD_ID]);
            donvi.TenDV = "" + reader[FIELD_TENDV];
            donvi.DiaChi = "" + reader[FIELD_DIACHI];
            donvi.Email = "" + reader[FIELD_EMAIL];
            donvi.ParentID = int.Parse("0" + reader[FIELD_PARENTID]);
            donvi.PhanLoai = int.Parse("0" + reader[FIELD_PHANLOAI]);
            donvi.Tinh = int.Parse("0" + reader[FIELD_TINH]);
            donvi.Huyen = int.Parse("0" + reader[FIELD_HUYEN]);
            donvi.Xa = int.Parse("0" + reader[FIELD_XA]);
        }

        private static void SetListDonViInfo(ref DbDataReader reader, ref List<DonVi> donvis)
        {
            DonVi donvi = null;
            while (reader.Read())
            {
                donvi = new DonVi();
                DonViDataAccess.SetDonViInfo(reader, ref donvi);
                donvis.Add(donvi);
            }
        }

        private static void SetBindingListDonViInfo(ref DbDataReader reader, ref BindingList<DonVi> donvis)
        {
            DonVi donvi = null;
            while (reader.Read())
            {
                donvi = new DonVi();
                DonViDataAccess.SetDonViInfo(reader, ref donvi);
                donvis.Add(donvi);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertDonVi(DonVi donvi)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateDonVi(List<DonVi> donvis)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (DonVi donvi in donvis)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));

                    para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[donvi_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateDonVi(DonVi donvi)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));

                para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDonVi(List<DonVi> donvis)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (DonVi donvi in donvis)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DonVi_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDonVi(DonVi donvi)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_Delete]", para.ToArray());
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public DonVi SelectDonVi(int ID)
        {

            DonVi donvi = new DonVi();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DonViDataAccess.SetDonViInfo(reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }



        public List<DonVi> SelectAllDonVi()
        {
            List<DonVi> donvi = new List<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DonViDataAccess.SetListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<DonVi> SelectBindingAllDonVi()
        {
            BindingList<DonVi> donvi = new BindingList<DonVi>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DonVi_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DonViDataAccess.SetBindingListDonViInfo(ref reader, ref donvi);
                return donvi;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DonViDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertDonVi(DbTransaction transaction, DonVi donvi)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));

                para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));
                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DonVi_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateDonVi(DbTransaction transaction, List<DonVi> donvis)
        {

            int count = 0;
            try
            {

                foreach (DonVi donvi in donvis)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));

                    para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DonVi_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateDonVi(DbTransaction transaction, DonVi donvi)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, donvi.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENDV, donvi.TenDV, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, donvi.DiaChi, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, donvi.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, donvi.ParentID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHANLOAI, donvi.PhanLoai, false));

                para.Add(_DbHelper.CreateParameter(FIELD_TINH, donvi.Tinh, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HUYEN, donvi.Huyen, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XA, donvi.Xa, false));
                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DonVi_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteDonVi(DbTransaction transaction, List<DonVi> donvis)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (DonVi donvi in donvis)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DonVi_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DonViDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}
