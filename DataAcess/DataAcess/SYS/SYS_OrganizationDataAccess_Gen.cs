//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Monday, July 12, 2010
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_OrganizationDataAccess
    {

        private SYS_Organization _sys_organization;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_NAME = "Name";
        public static string FIELD_PARENTID = "ParentId";
        public static string FIELD_CODE = "Code";
        public static string FIELD_ADDRESS = "Address";
        public static string FIELD_PHONE = "Phone";
        public static string FIELD_FAX = "Fax";
        public static string FIELD_EMAIL = "Email";
        public static string FIELD_WEBSITE = "Website";
        public static string FIELD_TYPE = "Type";
        public static string FIELD_IDPROVINCE = "IDProvince";
        public static string FIELD_LEVELREPORT = "LevelReport";

        #region Private methods

        private static void SetSYS_OrganizationInfo(DbDataReader reader, ref SYS_Organization sys_organization)
        {
            sys_organization.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_organization.Name = "" + reader[FIELD_NAME];
            sys_organization.ParentId = int.Parse("0" + reader[FIELD_PARENTID]);

            if (reader.FieldCount > 3)
            {
                sys_organization.Code = "" + reader[FIELD_CODE];
            }
            sys_organization.Address = "" + reader[FIELD_ADDRESS];
            sys_organization.Phone = "" + reader[FIELD_PHONE];
            sys_organization.Fax = "" + reader[FIELD_FAX];
            sys_organization.Email = "" + reader[FIELD_EMAIL];
            sys_organization.Website = "" + reader[FIELD_WEBSITE];
            sys_organization.Type = int.Parse("0" + reader[FIELD_TYPE]);
            sys_organization.IDProvince = int.Parse("0" + reader[FIELD_IDPROVINCE]);
            sys_organization.LevelReport = int.Parse("0" + reader[FIELD_LEVELREPORT]);
        }

        private static void SetListSYS_OrganizationInfo(ref DbDataReader reader, ref List<SYS_Organization> sys_organizations)
        {
            SYS_Organization sys_organization = null;
            while (reader.Read())
            {
                sys_organization = new SYS_Organization();
                SYS_OrganizationDataAccess.SetSYS_OrganizationInfo(reader, ref sys_organization);
                sys_organizations.Add(sys_organization);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_Organization(SYS_Organization sys_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_organization.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ADDRESS, sys_organization.Address, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHONE, sys_organization.Phone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FAX, sys_organization.Fax, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_organization.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_WEBSITE, sys_organization.Website, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TYPE, sys_organization.Type, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDPROVINCE, sys_organization.IDProvince, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LEVELREPORT, sys_organization.LevelReport, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Organization_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_Organization(List<SYS_Organization> sys_organizations)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_Organization sys_organization in sys_organizations)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_organization.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ADDRESS, sys_organization.Address, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PHONE, sys_organization.Phone, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_FAX, sys_organization.Fax, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_organization.Email, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_WEBSITE, sys_organization.Website, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TYPE, sys_organization.Type, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_LEVELREPORT, sys_organization.LevelReport, false));
                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_organization_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_Organization(SYS_Organization sys_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, sys_organization.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ADDRESS, sys_organization.Address, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PHONE, sys_organization.Phone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_FAX, sys_organization.Fax, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_organization.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_WEBSITE, sys_organization.Website, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TYPE, sys_organization.Type, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDPROVINCE, sys_organization.IDProvince, false));
                para.Add(_DbHelper.CreateParameter(FIELD_LEVELREPORT, sys_organization.LevelReport, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Organization_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Organization(List<SYS_Organization> sys_organizations)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_Organization sys_organization in sys_organizations)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_Organization_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_Organization(SYS_Organization sys_organization)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Organization_Delete]", para.ToArray());
            }
            catch (Exception)
            {


                throw;
            }
            finally
            {
                conn.Close();
            }

        }

        public SYS_Organization SelectSYS_Organization(int ID)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();

            SYS_Organization sys_organization = new SYS_Organization();
            DbDataReader reader = null;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Organization_GetByID]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_OrganizationDataAccess.SetSYS_OrganizationInfo(reader, ref sys_organization);
                return sys_organization;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_Organization> SelectAllSYS_Organization()
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<SYS_Organization> sys_organization = new List<SYS_Organization>();
            DbDataReader reader = null;
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_Organization_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_OrganizationDataAccess.SetListSYS_OrganizationInfo(ref reader, ref sys_organization);
                return sys_organization;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_OrganizationDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_Organization(DbTransaction transaction, SYS_Organization sys_organization)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Organization_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_Organization(DbTransaction transaction, List<SYS_Organization> sys_organizations)
        {

            int count = 0;
            try
            {

                foreach (SYS_Organization sys_organization in sys_organizations)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Organization_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_Organization(DbTransaction transaction, SYS_Organization sys_organization)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_organization.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, sys_organization.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PARENTID, sys_organization.ParentId, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Organization_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_Organization(DbTransaction transaction, List<SYS_Organization> sys_organizations)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_Organization sys_organization in sys_organizations)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_Organization_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_OrganizationDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

