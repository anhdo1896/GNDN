//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 5.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Friday, October 28, 2011
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;


namespace DataAccess
{
    public partial class SYS_ColumnCategoryDataAccess
    {

        private SYS_ColumnCategory _sys_columncategory;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_ID = "ID";
        public static string FIELD_COLUMNNAME = "ColumnName";
        public static string FIELD_DISPLAYNAME = "DisplayName";
        public static string FIELD_IDCATEGORYMANAGER = "IDCategoryManager";
        public static string FIELD_TABLENAME = "TableName";
        public static string FIELD_ALLOWNULL = "AllowNull";
        public static string FIELD_DATATYPE = "DataType";


        #region Private methods

        private static void SetSYS_ColumnCategoryInfo(DbDataReader reader, ref SYS_ColumnCategory sys_columncategory)
        {
            sys_columncategory.ID = int.Parse("0" + reader[FIELD_ID]);
            sys_columncategory.ColumnName = "" + reader[FIELD_COLUMNNAME];
            sys_columncategory.DisplayName = "" + reader[FIELD_DISPLAYNAME];
            sys_columncategory.IDCategoryManager = int.Parse("0" + reader[FIELD_IDCATEGORYMANAGER]);
            sys_columncategory.DataType = "" + reader[FIELD_DATATYPE];
            sys_columncategory.AllowNull = Boolean.Parse("" + reader[FIELD_ALLOWNULL]);
        }

        private static void SetListSYS_ColumnCategoryInfo(ref DbDataReader reader, ref List<SYS_ColumnCategory> sys_columncategorys)
        {
            SYS_ColumnCategory sys_columncategory = null;
            while (reader.Read())
            {
                sys_columncategory = new SYS_ColumnCategory();
                SYS_ColumnCategoryDataAccess.SetSYS_ColumnCategoryInfo(reader, ref sys_columncategory);
                sys_columncategorys.Add(sys_columncategory);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertSYS_ColumnCategory(SYS_ColumnCategory sys_columncategory)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateSYS_ColumnCategory(List<SYS_ColumnCategory> sys_columncategorys)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (SYS_ColumnCategory sys_columncategory in sys_columncategorys)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[sys_columncategory_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateSYS_ColumnCategory(SYS_ColumnCategory sys_columncategory)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));

                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_ColumnCategory(List<SYS_ColumnCategory> sys_columncategorys)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (SYS_ColumnCategory sys_columncategory in sys_columncategorys)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteSYS_ColumnCategory(SYS_ColumnCategory sys_columncategory)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_Delete]", para.ToArray());

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                conn.Close();
            }


        }

        public SYS_ColumnCategory SelectSYS_ColumnCategory(int ID)
        {

            SYS_ColumnCategory sys_columncategory = new SYS_ColumnCategory();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_ID, ID, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    SYS_ColumnCategoryDataAccess.SetSYS_ColumnCategoryInfo(reader, ref sys_columncategory);
                return sys_columncategory;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<SYS_ColumnCategory> SelectAllSYS_ColumnCategory()
        {
            List<SYS_ColumnCategory> sys_columncategory = new List<SYS_ColumnCategory>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    SYS_ColumnCategoryDataAccess.SetListSYS_ColumnCategoryInfo(ref reader, ref sys_columncategory);
                return sys_columncategory;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" SYS_ColumnCategoryDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<SYS_ColumnCategory> SelectAllSYS_ColumnCategoryByNameTable(string Table)
        {
            List<SYS_ColumnCategory> sys_columcategory = new List<SYS_ColumnCategory>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_TABLENAME, Table, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_SelectByNameTable]", para.ToArray());
                if (reader.HasRows)
                    SYS_ColumnCategoryDataAccess.SetListSYS_ColumnCategoryInfo(ref reader, ref sys_columcategory);
                return sys_columcategory;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.SYS_ColumnCategory_SelectByNameTable: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public List<SYS_ColumnCategory> SelectAllSYS_ColumnCategoryByIDCatManager(int IDCatManager)
        {
            List<SYS_ColumnCategory> sys_columcategory = new List<SYS_ColumnCategory>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, IDCatManager, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_ColumnCategory_SelectByIDCatManager]", para.ToArray());
                if (reader.HasRows)
                    SYS_ColumnCategoryDataAccess.SetListSYS_ColumnCategoryInfo(ref reader, ref sys_columcategory);
                return sys_columcategory;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.SYS_ColumnCategory_SelectByNameTable: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }

        public int InsertSYS_ColumnCategory(DbTransaction transaction, SYS_ColumnCategory sys_columncategory)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_ID, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_ColumnCategory_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateSYS_ColumnCategory(DbTransaction transaction, List<SYS_ColumnCategory> sys_columncategorys)
        {

            int count = 0;
            try
            {

                foreach (SYS_ColumnCategory sys_columncategory in sys_columncategorys)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_ColumnCategory_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateSYS_ColumnCategory(DbTransaction transaction, SYS_ColumnCategory sys_columncategory)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_ID, sys_columncategory.ID, false));
                para.Add(_DbHelper.CreateParameter(FIELD_COLUMNNAME, sys_columncategory.ColumnName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DISPLAYNAME, sys_columncategory.DisplayName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDCATEGORYMANAGER, sys_columncategory.IDCategoryManager, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ALLOWNULL, sys_columncategory.AllowNull, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DATATYPE, sys_columncategory.DataType, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_ColumnCategory_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteSYS_ColumnCategory(DbTransaction transaction, List<SYS_ColumnCategory> sys_columncategorys)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (SYS_ColumnCategory sys_columncategory in sys_columncategorys)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_ID, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[SYS_ColumnCategory_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_ColumnCategoryDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}


