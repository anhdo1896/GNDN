//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 4.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Friday, September 19, 2014
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class DM_DVQLYDataAccess
    {

        private DM_DVQLY _dm_dvqly;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_IDMA_DVIQLY = "IDMA_DVIQLY";
        public static string FIELD_MA_DVIQLY = "MA_DVIQLY";
        public static string FIELD_TEN_DVIQLY = "TEN_DVIQLY";
        public static string FIELD_ParentId = "ParentId";
        public static string FIELD_NAME_DVIQLY = "NAME_DVIQLY";
        public static string FIELD_TENVIETTAT = "TenVietTat";

        #region Private methods

        private static void SetDM_DVQLYInfo1(DbDataReader reader, ref DM_DVQLY dm_dvqly)
        {
            dm_dvqly.IDMA_DVIQLY = int.Parse("0" + reader[FIELD_IDMA_DVIQLY]);
            dm_dvqly.TEN_DVIQLY = "" + reader[FIELD_TEN_DVIQLY];
            dm_dvqly.MA_DVIQLY = "" + reader[FIELD_MA_DVIQLY];
            dm_dvqly.ParentId = int.Parse("0" + reader[FIELD_ParentId]);
            dm_dvqly.NAME_DVIQLY = "" + reader[FIELD_NAME_DVIQLY];
            dm_dvqly.Type =int.Parse( "" + reader["Type"]);
            dm_dvqly.TenVietTat=""+ reader["TenVietTat"];
        }
        private static void SetDM_DVQLYInfo(DbDataReader reader, ref DM_DVQLY dm_dvqly)
        {
            dm_dvqly.IDMA_DVIQLY = int.Parse("0" + reader[FIELD_IDMA_DVIQLY]);
            dm_dvqly.TEN_DVIQLY = "" + reader[FIELD_TEN_DVIQLY];
            dm_dvqly.MA_DVIQLY = "" + reader[FIELD_MA_DVIQLY];
            dm_dvqly.ParentId = int.Parse("0" + reader[FIELD_ParentId]);
            dm_dvqly.NAME_DVIQLY = "" + reader[FIELD_NAME_DVIQLY];
            dm_dvqly.TenVietTat = "" + reader["TenVietTat"];
        }
        private static void SetListDM_DVQLYInfo(ref DbDataReader reader, ref List<DM_DVQLY> dm_dvqlys)
        {
            DM_DVQLY dm_dvqly = null;
            while (reader.Read())
            {
                dm_dvqly = new DM_DVQLY();
                DM_DVQLYDataAccess.SetDM_DVQLYInfo(reader, ref dm_dvqly);
                dm_dvqlys.Add(dm_dvqly);
            }
        }

        private static void SetBindingListDM_DVQLYInfo(ref DbDataReader reader, ref BindingList<DM_DVQLY> dm_dvqlys)
        {
            DM_DVQLY dm_dvqly = null;
            while (reader.Read())
            {
                dm_dvqly = new DM_DVQLY();
                DM_DVQLYDataAccess.SetDM_DVQLYInfo(reader, ref dm_dvqly);
                dm_dvqlys.Add(dm_dvqly);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertDM_DVQLY(DM_DVQLY dm_dvqly)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_DVQLY_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateDM_DVQLY(List<DM_DVQLY> dm_dvqlys)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (DM_DVQLY dm_dvqly in dm_dvqlys)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[dm_dvqly_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateDM_DVQLY(DM_DVQLY dm_dvqly)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_DVQLY_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDM_DVQLY(List<DM_DVQLY> dm_dvqlys)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (DM_DVQLY dm_dvqly in dm_dvqlys)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_DVQLY_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDM_DVQLY(DM_DVQLY dm_dvqly)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_DVQLY_Delete]", para.ToArray());
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public DM_DVQLY SelectDM_DVQLY(int IDMA_DVIQLY)
        {
            DM_DVQLY dm_dvqly = new DM_DVQLY();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, IDMA_DVIQLY, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_DVQLY_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DM_DVQLYDataAccess.SetDM_DVQLYInfo1(reader, ref dm_dvqly);
                return dm_dvqly;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<DM_DVQLY> SelectAllDM_DVQLY()
        {
            List<DM_DVQLY> dm_dvqly = new List<DM_DVQLY>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_DVQLY_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_DVQLYDataAccess.SetListDM_DVQLYInfo(ref reader, ref dm_dvqly);
                return dm_dvqly;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_DVQLYDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<DM_DVQLY> SelectBindingAllDM_DVQLY()
        {
            BindingList<DM_DVQLY> dm_dvqly = new BindingList<DM_DVQLY>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_DVQLY_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_DVQLYDataAccess.SetBindingListDM_DVQLYInfo(ref reader, ref dm_dvqly);
                return dm_dvqly;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_DVQLYDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertDM_DVQLY(DbTransaction transaction, DM_DVQLY dm_dvqly)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));
                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_DVQLY_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateDM_DVQLY(DbTransaction transaction, List<DM_DVQLY> dm_dvqlys)
        {

            int count = 0;
            try
            {

                foreach (DM_DVQLY dm_dvqly in dm_dvqlys)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));
                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_DVQLY_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateDM_DVQLY(DbTransaction transaction, DM_DVQLY dm_dvqly)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_dvqly.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_MA_DVIQLY, dm_dvqly.MA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TEN_DVIQLY, dm_dvqly.TEN_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_ParentId, dm_dvqly.ParentId, false));
                para.Add(_DbHelper.CreateParameter(FIELD_TENVIETTAT, dm_dvqly.TenVietTat, false));
                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_DVQLY_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteDM_DVQLY(DbTransaction transaction, List<DM_DVQLY> dm_dvqlys)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (DM_DVQLY dm_dvqly in dm_dvqlys)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_DVQLY_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_DVQLYDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
        public List<DM_DVQLY> Select_DVI_Cha_ByChild()
        {
            List<DM_DVQLY> dm_dvqly = new List<DM_DVQLY>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[Select_DVI_Cha_ByChild]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_DVQLYDataAccess.SetListDM_DVQLYInfo(ref reader, ref dm_dvqly);
                return dm_dvqly;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_DVQLYDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
    }
}

