//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 4.0.0.0
//-- Template:       DataAcess.cst
//-- Date Generated: Friday, September 19, 2014
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;

namespace DataAccess
{
    public partial class DM_USERDataAccess
    {
        public DataTable LAY_USERNAME()
        {
            DbConnection connection = _DbHelper.CreateConnection(Common.ConnectionString);
            connection.Open();
            try
            {
                DataTable dt = _DbHelper.RunProcedureGetTable(connection, Common.DatabaseSchema + "[LAY_USERNAME]", null);
                return dt;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("LAY_USERNAME.SelectAll_DVI_ByChild: {0}", ex.Message));
            }
            finally
            {
                connection.Close();
            }

        }
         public int InsertSYS_User_maDvi(SYS_User sys_user,string Ma_Dvi)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {          

                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDUSER, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, sys_user.UserName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, sys_user.Password, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, sys_user.FullName, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, sys_user.Email, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, sys_user.NumberPhone, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, sys_user.DiaChi, false));
                para.Add(_DbHelper.CreateParameter("MA_DVIQLY", Ma_Dvi, false));
                para.Add(ouput);
                _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SYS_User_Insert_maDvi]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Insert_maDvi: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
        public void UpdateSYS_UserAll(DM_USER dm_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CHUCDANH, dm_user.CHUCDANH, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Update]", para.ToArray());
                SYS_RoleOfUserDataAccess sysRoleOfUserDataAccess = new SYS_RoleOfUserDataAccess();
                SYS_RoleOfUser sysRoleOfUser = new SYS_RoleOfUser();
                SYS_RightOfUser sysRightOfUserID = new SYS_RightOfUser();
                sysRightOfUserID.UserId = dm_user.IDUSER;
                sysRoleOfUser.UserId = dm_user.IDUSER;
                sysRoleOfUserDataAccess.DeleteSYS_RoleOfUserByIDUser(sysRoleOfUser);

                sysRoleOfUser.RoleId = dm_user.Roles.ID;
                sysRoleOfUserDataAccess.InsertSYS_RoleOfUser(sysRoleOfUser);

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("dm_user_Update.UpdateAll: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
        public int InsertSYS_UserAll(DM_USER dm_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            SYS_RoleOfUserDataAccess sysRoleOfUserDataAccess = new SYS_RoleOfUserDataAccess();
            SYS_RightOfUserDataAccess sysRightOfUserDataAccess = new SYS_RightOfUserDataAccess();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDUSER, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CHUCDANH, dm_user.CHUCDANH, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Insert]", para.ToArray());
                dm_user.IDUSER = (int)ouput.Value;
                SYS_RoleOfUser sysRoleOfUser = new SYS_RoleOfUser();
                sysRoleOfUser.RoleId = dm_user.Roles.ID;
                //sysRoleOfUser.RoleId = sys_user.IDOrganization;
                sysRoleOfUser.UserId = dm_user.IDUSER;
                if (dm_user.Roles.ID != 0)
                {
                    sysRoleOfUserDataAccess.InsertSYS_RoleOfUser(sysRoleOfUser);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("SYS_UserDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return dm_user.IDUSER;
        }

        public List<DM_USER> SelectAllSYS_User_IsActive(int IDMA_DVIQLY)
        {
            List<DM_USER> dm_user = new List<DM_USER>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                //List<DbParameter> para = new List<DbParameter>();
                //para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, IDMA_DVIQLY, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SelectAllSYS_User_IsActive]", null);
                if (reader.HasRows)
                    DM_USERDataAccess.SetListDM_USERInfo(ref reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_USERDataAccess.SelectAllSYS_User_IsActive: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        private static void SetDM_USER(DbDataReader reader, ref DM_USER dm_user)
        {
            dm_user.IDUSER = int.Parse("0" + reader[FIELD_IDUSER]);
            dm_user.IDMA_DVIQLY = int.Parse("0" + reader[FIELD_IDMA_DVIQLY]);
            dm_user.USERNAME = "" + reader[FIELD_USERNAME];
            dm_user.PASSWORD = "" + reader[FIELD_PASSWORD];
            dm_user.HOTEN = "" + reader[FIELD_HOTEN];
            dm_user.DIACHI = "" + reader[FIELD_DIACHI];
            dm_user.SODT = "" + reader[FIELD_SODT];
            dm_user.EMAIL = "" + reader[FIELD_EMAIL];
            DateTime NGAYSINH = (DateTime)reader[FIELD_NGAYSINH];
            dm_user.NGAYSINH = NGAYSINH != null ? (DateTime)NGAYSINH : DateTime.Now;
            DateTime NGAYTAO = (DateTime)reader[FIELD_NGAYTAO];
            dm_user.NGAYTAO = NGAYTAO != null ? (DateTime)NGAYTAO : DateTime.Now;
            dm_user.IS_ADMIN = int.Parse("0" + reader[FIELD_IS_ADMIN]);
            dm_user.XACNHAN = bool.Parse("" + reader[FIELD_XACNHAN]);
            dm_user.strDonVi = "" + reader["strDonVi"];
            SYS_RolesDataAccess sysRoleDataAccess = new SYS_RolesDataAccess();
            dm_user.Roles = sysRoleDataAccess.GetRolesByUser(dm_user.IDUSER);
            dm_user.RoleGroup = dm_user.Roles.Name;
            dm_user.CHUCDANH = "" + reader[FIELD_CHUCDANH];
        }

        private static void SetListDM_USER(ref DbDataReader reader, ref List<DM_USER> dm_users)
        {
            DM_USER dm_user = null;
            while (reader.Read())
            {
                dm_user = new DM_USER();
                DM_USERDataAccess.SetDM_USER(reader, ref dm_user);
                dm_users.Add(dm_user);
            }
        }
        public List<DM_USER> SelectAllSYS_User_NotIsActive(int IDMA_DVIQLY)
        {
            List<DM_USER> dm_user = new List<DM_USER>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                //List<DbParameter> para = new List<DbParameter>();
                //para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, IDMA_DVIQLY, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[SelectAllSYS_User_NotIsActive]", null);
                if (reader.HasRows)
                    DM_USERDataAccess.SetListDM_USER(ref reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_USERDataAccess.SelectAllSYS_User_NotIsActive: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public List<DM_USER> DM_USER_SelectAll_ByIDMA_DVIQLY(int IDMA_DVIQLY)
        {
            List<DM_USER> dm_user = new List<DM_USER>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, IDMA_DVIQLY, false));
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_USER_SelectAll_ByIDMA_DVIQLY]", para.ToArray());
                if (reader.HasRows)
                    DM_USERDataAccess.SetListDM_USERInfo(ref reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_USERDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public DM_USER DM_UserByUserNameAndIDOrganization(int IDMA_DVIQLY, string Name)
        {

            DM_USER dm_user = new DM_USER();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, Name, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_UserByUserNameAndIDOrganization]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DM_USERDataAccess.SetDM_USERInfo(reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.DM_UserByUserNameAndIDOrganization: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }

        public DM_USER DM_UserNameAndIDOrganization(string MA_DVIQLY, string Name)
        {

            DM_USER dm_user = new DM_USER();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, MA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, Name, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_UserNameAndIDOrganization]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DM_USERDataAccess.SetDM_USERInfo(reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.DM_UserNameAndIDOrganization: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }
    }
}


