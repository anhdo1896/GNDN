//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 4.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Tuesday, September 30, 2014
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class DM_MODULEDataAccess
    {

        private DM_MODULE _dm_module;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_IDMODULE = "IDMODULE";
        public static string FIELD_IDMA_DVIQLY = "IDMA_DVIQLY";
        public static string FIELD_CONNECTSTRING = "ConnectString";
        public static string FIELD_NAME = "Name";
        public static string FIELD_CODE = "Code";
        public static string FIELD_IDUSER = "IDUSER";
        public static string FIELD_USERNAME = "USERNAME";
        public static string FIELD_NAME_DVIQLY = "NAME_DVIQLY";


        #region Private methods

        private static void SetDM_MODULEInfo(DbDataReader reader, ref DM_MODULE dm_module)
        {
            dm_module.IDMODULE = int.Parse("0" + reader[FIELD_IDMODULE]);
            dm_module.Code = "" + reader[FIELD_CODE];
            dm_module.Name = "" + reader[FIELD_NAME];
            dm_module.ConnectString = "" + reader[FIELD_CONNECTSTRING];
            dm_module.IDUSER = int.Parse("0" + reader[FIELD_IDUSER]);
            dm_module.USERNAME = "" + reader[FIELD_USERNAME];
            dm_module.NAME_DVIQLY = "" + reader[FIELD_NAME_DVIQLY];
            dm_module.IDMA_DVIQLY = int.Parse("" + reader[FIELD_IDMA_DVIQLY]);
        }

        private static void SetListDM_MODULEInfo(ref DbDataReader reader, ref List<DM_MODULE> dm_modules)
        {
            DM_MODULE dm_module = null;
            while (reader.Read())
            {
                dm_module = new DM_MODULE();
                DM_MODULEDataAccess.SetDM_MODULEInfo(reader, ref dm_module);
                dm_modules.Add(dm_module);
            }
        }

        private static void SetBindingListDM_MODULEInfo(ref DbDataReader reader, ref BindingList<DM_MODULE> dm_modules)
        {
            DM_MODULE dm_module = null;
            while (reader.Read())
            {
                dm_module = new DM_MODULE();
                DM_MODULEDataAccess.SetDM_MODULEInfo(reader, ref dm_module);
                dm_modules.Add(dm_module);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertDM_MODULE(DM_MODULE dm_module)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDMODULE, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_MODULE_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
     
        public int UpdateDM_MODULE(List<DM_MODULE> dm_modules)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (DM_MODULE dm_module in dm_modules)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[dm_module_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateDM_MODULE(DM_MODULE dm_module)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));

                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_MODULE_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDM_MODULE(List<DM_MODULE> dm_modules)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (DM_MODULE dm_module in dm_modules)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_MODULE_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDM_MODULE(DM_MODULE dm_module)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_MODULE_Delete]", para.ToArray());
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {

                conn.Close();
            }
        }

        public DM_MODULE SelectDM_MODULE(int IDMODULE)
        {

            DM_MODULE dm_module = new DM_MODULE();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, IDMODULE, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_MODULE_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DM_MODULEDataAccess.SetDM_MODULEInfo(reader, ref dm_module);
                return dm_module;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<DM_MODULE> SelectAllDM_MODULE()
        {
            List<DM_MODULE> dm_module = new List<DM_MODULE>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_MODULE_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_MODULEDataAccess.SetListDM_MODULEInfo(ref reader, ref dm_module);
                return dm_module;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_MODULEDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<DM_MODULE> SelectBindingAllDM_MODULE()
        {
            BindingList<DM_MODULE> dm_module = new BindingList<DM_MODULE>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_MODULE_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_MODULEDataAccess.SetBindingListDM_MODULEInfo(ref reader, ref dm_module);
                return dm_module;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_MODULEDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertDM_MODULE(DbTransaction transaction, DM_MODULE dm_module)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDMODULE, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_MODULE_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateDM_MODULE(DbTransaction transaction, List<DM_MODULE> dm_modules)
        {

            int count = 0;
            try
            {

                foreach (DM_MODULE dm_module in dm_modules)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_MODULE_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateDM_MODULE(DbTransaction transaction, DM_MODULE dm_module)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, dm_module.IDMODULE, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_module.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CONNECTSTRING, dm_module.ConnectString, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NAME, dm_module.Name, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CODE, dm_module.Code, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_module.IDUSER, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_MODULE_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteDM_MODULE(DbTransaction transaction, List<DM_MODULE> dm_modules)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (DM_MODULE dm_module in dm_modules)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMODULE, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_MODULE_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_MODULEDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

