//------------------------------------------------------------------------------------------------------------------------
//-- Generated By:   TrungVK using CodeSmith 4.0.0.0
//-- Template:       DataAcessGen.cst
//-- Date Generated: Tuesday, September 23, 2014
//------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using Connection;
using Entity;
using System.ComponentModel;


namespace DataAccess
{
    public partial class DM_USERDataAccess
    {

        private DM_USER _dm_user;

        private MSSqlHelper _DbHelper = new MSSqlHelper();

        public static string FIELD_IDUSER = "IDUSER";
        public static string FIELD_IDMA_DVIQLY = "IDMA_DVIQLY";
        public static string FIELD_XACNHAN = "XACNHAN";
        public static string FIELD_USERNAME = "USERNAME";
        public static string FIELD_PASSWORD = "PASSWORD";
        public static string FIELD_HOTEN = "HOTEN";
        public static string FIELD_DIACHI = "DIACHI";
        public static string FIELD_SODT = "SODT";
        public static string FIELD_EMAIL = "EMAIL";
        public static string FIELD_NGAYSINH = "NGAYSINH";
        public static string FIELD_NGAYTAO = "NGAYTAO";
        public static string FIELD_IS_ADMIN = "IS_ADMIN";
        public static string FIELD_CHUCDANH = "CHUCDANH";

        #region Private methods

        private static void SetDM_USERInfo(DbDataReader reader, ref DM_USER dm_user)
        {
            dm_user.IDUSER = int.Parse("0" + reader[FIELD_IDUSER]);
            dm_user.IDMA_DVIQLY = int.Parse("0" + reader[FIELD_IDMA_DVIQLY]);
            dm_user.USERNAME = "" + reader[FIELD_USERNAME];
            dm_user.PASSWORD = "" + reader[FIELD_PASSWORD];
            dm_user.HOTEN = "" + reader[FIELD_HOTEN];
            dm_user.DIACHI = "" + reader[FIELD_DIACHI];
            dm_user.SODT = "" + reader[FIELD_SODT];
            dm_user.EMAIL = "" + reader[FIELD_EMAIL];
            DateTime NGAYSINH = (DateTime)reader[FIELD_NGAYSINH];
            dm_user.NGAYSINH = NGAYSINH != null ? (DateTime)NGAYSINH : DateTime.Now;
            DateTime NGAYTAO = (DateTime)reader[FIELD_NGAYTAO];
            dm_user.NGAYTAO = NGAYTAO != null ? (DateTime)NGAYTAO : DateTime.Now;
            dm_user.IS_ADMIN = int.Parse("0" + reader[FIELD_IS_ADMIN]);
            dm_user.XACNHAN = bool.Parse("" + reader[FIELD_XACNHAN]);
            dm_user.CHUCDANH = "" + reader[FIELD_CHUCDANH];
            SYS_RolesDataAccess sysRoleDataAccess = new SYS_RolesDataAccess();
            dm_user.Roles = sysRoleDataAccess.GetRolesByUser(dm_user.IDUSER);
            dm_user.RoleGroup = dm_user.Roles.Name;

        }

        private static void SetListDM_USERInfo(ref DbDataReader reader, ref List<DM_USER> dm_users)
        {
            DM_USER dm_user = null;
            while (reader.Read())
            {
                dm_user = new DM_USER();
                DM_USERDataAccess.SetDM_USERInfo(reader, ref dm_user);
                dm_users.Add(dm_user);
            }
        }

        private static void SetBindingListDM_USERInfo(ref DbDataReader reader, ref BindingList<DM_USER> dm_users)
        {
            DM_USER dm_user = null;
            while (reader.Read())
            {
                dm_user = new DM_USER();
                DM_USERDataAccess.SetDM_USERInfo(reader, ref dm_user);
                dm_users.Add(dm_user);
            }
        }

        #endregion

        #region Static methods
        #endregion
        public int InsertDM_USER(DM_USER dm_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDUSER, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));
                para.Add(ouput);
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Insert]", para.ToArray());
                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Insert: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public int UpdateDM_USER(List<DM_USER> dm_users)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            int count = 0;
            try
            {

                foreach (DM_USER dm_user in dm_users)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[dm_user_Update]", para.ToArray());
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
            return count;
        }

        public void UpdateDM_USER(DM_USER dm_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_CHUCDANH, dm_user.CHUCDANH, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Update: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
        public void UpdateDM_USER_PASSWORD(DM_USER dm_user,string IDMADV)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                para.Add(_DbHelper.CreateParameter("MA_DVIQLY", IDMADV, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Update_Password]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.DM_USER_Update_Password: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }
        public void DeleteDM_USER(List<DM_USER> dm_users)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            List<DbParameter> para = new List<DbParameter>();

            try
            {

                foreach (DM_USER dm_user in dm_users)
                {

                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));

                    _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Delete]", para.ToArray());
                    para.Clear();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Delete: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public void DeleteDM_USER(DM_USER dm_user)
        {
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                _DbHelper.ExecuteNonQuery(conn, Common.DatabaseSchema + "[DM_USER_Delete]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                conn.Close();
            }
        }

        public DM_USER SelectDM_USER(int IDUSER)
        {

            DM_USER dm_user = new DM_USER();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, IDUSER, false));

                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_USER_SelectById]", para.ToArray());
                if (reader.HasRows && reader.Read())
                    DM_USERDataAccess.SetDM_USERInfo(reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.SelectById: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }

        }


        public List<DM_USER> SelectAllDM_USER()
        {
            List<DM_USER> dm_user = new List<DM_USER>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_USER_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_USERDataAccess.SetListDM_USERInfo(ref reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_USERDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public BindingList<DM_USER> SelectBindingAllDM_USER()
        {
            BindingList<DM_USER> dm_user = new BindingList<DM_USER>();
            DbDataReader reader = null;
            DbConnection conn = _DbHelper.CreateConnection(Common.ConnectionString);
            conn.Open();
            try
            {
                reader = _DbHelper.ExecuteReader(conn, Common.DatabaseSchema + "[DM_USER_SelectAll]", (DbParameter[])null);
                if (reader.HasRows)
                    DM_USERDataAccess.SetBindingListDM_USERInfo(ref reader, ref dm_user);
                return dm_user;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format(" DM_USERDataAccess.SelectAll: {0}", ex.Message));
            }
            finally
            {
                if (reader != null)
                    reader.Close();
                conn.Close();
            }
        }
        public int InsertDM_USER(DbTransaction transaction, DM_USER dm_user)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                DbParameter ouput = _DbHelper.CreateParameter(FIELD_IDUSER, DbType.Int32, true);
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));

                para.Add(ouput);

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_USER_Insert]", para.ToArray());

                return (int)ouput.Value;
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Insert: {0}", ex.Message));
            }
        }



        public int UpdateDM_USER(DbTransaction transaction, List<DM_USER> dm_users)
        {

            int count = 0;
            try
            {

                foreach (DM_USER dm_user in dm_users)
                {
                    List<DbParameter> para = new List<DbParameter>();

                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                    para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_USER_Update]", para.ToArray());
                    count++;
                }
            }

            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Update: {0}", ex.Message));
            }

            return count;
        }

        public void UpdateDM_USER(DbTransaction transaction, DM_USER dm_user)
        {
            try
            {
                List<DbParameter> para = new List<DbParameter>();

                para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, dm_user.IDUSER, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IDMA_DVIQLY, dm_user.IDMA_DVIQLY, false));
                para.Add(_DbHelper.CreateParameter(FIELD_XACNHAN, dm_user.XACNHAN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_USERNAME, dm_user.USERNAME, false));
                para.Add(_DbHelper.CreateParameter(FIELD_PASSWORD, dm_user.PASSWORD, false));
                para.Add(_DbHelper.CreateParameter(FIELD_HOTEN, dm_user.HOTEN, false));
                para.Add(_DbHelper.CreateParameter(FIELD_DIACHI, dm_user.DIACHI, false));
                para.Add(_DbHelper.CreateParameter(FIELD_SODT, dm_user.SODT, false));
                para.Add(_DbHelper.CreateParameter(FIELD_EMAIL, dm_user.EMAIL, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYSINH, dm_user.NGAYSINH, false));
                para.Add(_DbHelper.CreateParameter(FIELD_NGAYTAO, dm_user.NGAYTAO, false));
                para.Add(_DbHelper.CreateParameter(FIELD_IS_ADMIN, dm_user.IS_ADMIN, false));

                _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_USER_Update]", para.ToArray());

            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Update: {0}", ex.Message));
            }
        }

        public int DeleteDM_USER(DbTransaction transaction, List<DM_USER> dm_users)
        {
            int count = 0;
            try
            {
                List<DbParameter> para = new List<DbParameter>();
                foreach (DM_USER dm_user in dm_users)
                {
                    para.Add(_DbHelper.CreateParameter(FIELD_IDUSER, DbType.Int32, false));

                    _DbHelper.ExecuteNonQuery(transaction, Common.DatabaseSchema + "[DM_USER_Delete]", para.ToArray());
                    para.Clear();
                    count++;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format("DM_USERDataAccess.Delete: {0}", ex.Message));
            }

            return count;
        }
    }
}

